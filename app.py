"""
VesiKolay Pro - Ana Uygulama
Excel verileri ile fotoƒüraflarƒ± e≈üle≈ütirip yeniden adlandƒ±ran ana program
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import logging
from pathlib import Path
from typing import List, Dict, Optional
import os
import threading
import webbrowser

class ToolTip:
    """Tooltip sƒ±nƒ±fƒ± - Widget'lara a√ßƒ±klama baloncuklarƒ± ekler"""
    
    def __init__(self, widget, text='widget info'):
        self.widget = widget
        self.text = text
        self.widget.bind("<Enter>", self.on_enter)
        self.widget.bind("<Leave>", self.on_leave)
        self.widget.bind("<ButtonPress>", self.on_leave)
        self.tipwindow = None
        self.id = None
        self.x = self.y = 0

    def on_enter(self, event=None):
        self.show_tip()

    def on_leave(self, event=None):
        self.hide_tip()

    def show_tip(self, event=None):
        "Display text in tooltip window"
        if self.tipwindow or not self.text:
            return
        x, y, cx, cy = self.widget.bbox("insert") if hasattr(self.widget, 'bbox') else (0, 0, 0, 0)
        x = x + self.widget.winfo_rootx() + 25
        y = y + cy + self.widget.winfo_rooty() + 25
        self.tipwindow = tw = tk.Toplevel(self.widget)
        tw.wm_overrideredirect(True)
        tw.wm_geometry("+%d+%d" % (x, y))
        
        label = tk.Label(tw, text=self.text, justify=tk.LEFT,
                        background="#ffffe0", relief=tk.SOLID, borderwidth=1,
                        font=("tahoma", "8", "normal"),
                        wraplength=300,
                        padx=4, pady=4)
        label.pack(ipadx=1)

    def hide_tip(self):
        tw = self.tipwindow
        self.tipwindow = None
        if tw:
            tw.destroy()

    def update_text(self, new_text):
        self.text = new_text

from excel_reader import ExcelReader
from photo_processor import PhotoProcessor
from utils import FileUtils, ValidationUtils, ProgressTracker

class ModernUI:
    """Modern UI stil sƒ±nƒ±fƒ±"""

    # Renk paleti
    COLORS = {
        'primary': '#2C3E50',
        'secondary': '#3498DB',
        'success': '#27AE60',
        'warning': '#F39C12',
        'danger': '#E74C3C',
        'light': '#ECF0F1',
        'dark': '#34495E',
        'white': '#FFFFFF',
        'text': '#2C3E50',
        'text_light': '#7F8C8D',
        'bg_main': '#F8F9FA',
        'card_bg': '#FFFFFF',
        'border': '#E9ECEF'
    }

    # Font ayarlarƒ±
    FONTS = {
        'title': ('Segoe UI', 16, 'bold'),
        'subtitle': ('Segoe UI', 12, 'bold'),
        'body': ('Segoe UI', 10),
        'small': ('Segoe UI', 9),
        'button': ('Segoe UI', 10, 'bold')
    }

class VesiKolayProApp:
    """VesiKolay Pro ana uygulama sƒ±nƒ±fƒ±"""

    def __init__(self):
        """Uygulamayƒ± ba≈ülat"""
        self.logger = logging.getLogger(__name__)

        # Mod√ºlleri ba≈ülat
        self.excel_reader = ExcelReader()
        self.photo_processor = PhotoProcessor()

        # Update checker'ƒ± ba≈ülat
        try:
            from update_checker import UpdateChecker
            self.update_checker = UpdateChecker()
        except ImportError as e:
            self.update_checker = None
            print(f"‚ö†Ô∏è G√ºncelleme kontrol√º mod√ºl√º y√ºklenemedi: {e}")
        except Exception as e:
            self.update_checker = None
            print(f"‚ö†Ô∏è G√ºncelleme kontrol√º ba≈ülatma hatasƒ±: {e}")

        # Uygulama durumu
        self.excel_file_path = None
        self.photo_directory = None
        self.excel_data = []
        self.available_columns = []
        self.selected_naming_columns = []
        self.school_name = ""

        # Threading i√ßin
        self.current_operation = None
        self.cancel_requested = threading.Event()

        # GUI olu≈ütur
        self.setup_gui()

    def setup_gui(self):
        """Modern GUI aray√ºz√ºn√º olu≈ütur"""
        # Display ayarlarƒ± - Replit i√ßin
        import os
        
        # Replit i√ßin gerekli environment deƒüi≈ükenleri
        if 'DISPLAY' not in os.environ:
            os.environ['DISPLAY'] = ':0'
        
        # X11 forwarding i√ßin gerekli ayarlar
        if os.getenv('REPL_ID'):
            os.environ['XDG_RUNTIME_DIR'] = '/tmp'
            os.environ['XAUTHORITY'] = '/tmp/.Xauthority'

        try:
            # Ana pencere
            self.root = tk.Tk()
            self.root.title("VesiKolay Pro - Fotoƒüraf Adlandƒ±rma Otomasyonu")
            self.root.geometry("1200x800")
            self.root.minsize(1000, 700)
            self.root.configure(bg=ModernUI.COLORS['bg_main'])
            
            # Program simgesi ayarla - g√∂rev √ßubuƒüu i√ßin optimize edilmi≈ü
            try:
                import platform
                system_type = platform.system()
                
                # Windows i√ßin ICO dosyasƒ±nƒ± √∂ncelikle dene
                if system_type == 'Windows':
                    ico_icon_path = Path(__file__).parent / "images" / "vesikolaypro.ico"
                    if ico_icon_path.exists():
                        # Hem pencere hem de g√∂rev √ßubuƒüu i√ßin
                        self.root.iconbitmap(str(ico_icon_path))
                        print("‚úÖ ICO simgesi ba≈üarƒ±yla y√ºklendi (Windows)")
                    else:
                        # ICO yoksa PNG'yi dene
                        png_icon_path = Path(__file__).parent / "images" / "vesikolaypro.png"
                        if png_icon_path.exists():
                            from PIL import Image, ImageTk
                            # G√∂rev √ßubuƒüu i√ßin daha b√ºy√ºk boyut
                            icon_image = Image.open(png_icon_path)
                            icon_image = icon_image.resize((48, 48), Image.Resampling.LANCZOS)
                            self.icon_photo = ImageTk.PhotoImage(icon_image)
                            self.root.iconphoto(True, self.icon_photo)  # True = g√∂rev √ßubuƒüu i√ßin de ge√ßerli
                            print("‚úÖ PNG simgesi ba≈üarƒ±yla y√ºklendi (Windows)")
                
                # Linux/Unix i√ßin PNG dosyasƒ±nƒ± dene
                else:
                    png_icon_path = Path(__file__).parent / "images" / "vesikolaypro.png"
                    if png_icon_path.exists():
                        from PIL import Image, ImageTk
                        # Linux i√ßin farklƒ± boyutlarda ikonlar hazƒ±rla
                        icon_image = Image.open(png_icon_path)
                        
                        # K√º√ß√ºk ikon (16x16) - g√∂rev √ßubuƒüu i√ßin
                        small_icon = icon_image.resize((16, 16), Image.Resampling.LANCZOS)
                        self.small_icon_photo = ImageTk.PhotoImage(small_icon)
                        
                        # B√ºy√ºk ikon (48x48) - pencere i√ßin
                        large_icon = icon_image.resize((48, 48), Image.Resampling.LANCZOS)
                        self.large_icon_photo = ImageTk.PhotoImage(large_icon)
                        
                        # Her ikisini de ayarla
                        self.root.iconphoto(True, self.large_icon_photo, self.small_icon_photo)
                        print("‚úÖ PNG simgesi ba≈üarƒ±yla y√ºklendi (Linux/Unix)")
                    
                    # Alternatif olarak ICO dosyasƒ±nƒ± da dene
                    else:
                        ico_icon_path = Path(__file__).parent / "images" / "vesikolaypro.ico"
                        if ico_icon_path.exists():
                            try:
                                # ICO dosyasƒ±nƒ± PNG'ye √ßevir
                                from PIL import Image, ImageTk
                                icon_image = Image.open(ico_icon_path)
                                icon_image = icon_image.resize((48, 48), Image.Resampling.LANCZOS)
                                self.icon_photo = ImageTk.PhotoImage(icon_image)
                                self.root.iconphoto(True, self.icon_photo)
                                print("‚úÖ ICO simgesi PNG'ye √ßevrilerek y√ºklendi (Linux/Unix)")
                            except:
                                print("‚ö†Ô∏è ICO dosyasƒ± PNG'ye √ßevrilemedi")
                
                # Pencere ba≈ülƒ±ƒüƒ±nƒ± da ayarla (g√∂rev √ßubuƒüu i√ßin)
                self.root.title("VesiKolay Pro - Fotoƒüraf Adlandƒ±rma Otomasyonu")
                
                # Windows i√ßin ek ayarlar
                if system_type == 'Windows':
                    try:
                        # G√∂rev √ßubuƒüu gruplama i√ßin
                        import ctypes
                        myappid = 'muallimun.vesikolaypro.v1.0'  # Uygulama kimliƒüi
                        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
                    except:
                        pass  # Hata olursa g√∂rmezden gel
                        
            except Exception as icon_error:
                print(f"‚ö†Ô∏è Simge y√ºklenirken hata (normal): {icon_error}")
            
            # GUI test
            self.root.update()
            print("‚úÖ GUI ba≈üarƒ±yla ba≈ülatƒ±ldƒ±")
            
        except Exception as e:
            print(f"‚ùå GUI ba≈ülatma hatasƒ±: {e}")
            print("üñ•Ô∏è Konsol modunda √ßalƒ±≈üƒ±lƒ±yor...")
            self.root = None
            return self.run_console_mode()

        # Stil ayarlarƒ±
        self.setup_styles()

        # Ana container
        self.main_container = tk.Frame(self.root, bg=ModernUI.COLORS['bg_main'])
        self.main_container.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Header
        self.create_header()

        # Ana i√ßerik alanƒ± (sol-saƒü split)
        self.create_main_layout()

        # Footer b√∂l√ºm√º
        self.create_footer()

        # Grid yapƒ±landƒ±rmasƒ±
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)

        # Program a√ßƒ±lƒ±≈üƒ±nda g√ºncelleme kontrol√º ba≈ülat
        self.check_for_updates_startup()

    def setup_styles(self):
        """TTK stillerini ayarla - Modern hover efektleri ile"""
        style = ttk.Style()
        style.theme_use('clam')

        # Primary Button - hover efektli
        style.configure('Primary.TButton',
                       background=ModernUI.COLORS['secondary'],
                       foreground=ModernUI.COLORS['white'],
                       font=ModernUI.FONTS['button'],
                       padding=(20, 12),
                       borderwidth=0,
                       focuscolor='none',
                       relief='flat')
        
        style.map('Primary.TButton',
                 background=[('active', '#2980B9'),  # Hover rengi (daha koyu mavi)
                           ('pressed', '#1F6391')],  # Basƒ±lma rengi
                 foreground=[('active', ModernUI.COLORS['white']),
                           ('pressed', ModernUI.COLORS['white'])])

        # Success Button - hover efektli
        style.configure('Success.TButton',
                       background=ModernUI.COLORS['success'],
                       foreground=ModernUI.COLORS['white'],
                       font=ModernUI.FONTS['button'],
                       padding=(20, 12),
                       borderwidth=0,
                       focuscolor='none',
                       relief='flat')
        
        style.map('Success.TButton',
                 background=[('active', '#219A52'),  # Hover rengi (daha koyu ye≈üil)
                           ('pressed', '#1E7E34')],  # Basƒ±lma rengi
                 foreground=[('active', ModernUI.COLORS['white']),
                           ('pressed', ModernUI.COLORS['white'])])

        # Warning Button - hover efektli
        style.configure('Warning.TButton',
                       background=ModernUI.COLORS['warning'],
                       foreground=ModernUI.COLORS['white'],
                       font=ModernUI.FONTS['button'],
                       padding=(16, 8),
                       borderwidth=0,
                       focuscolor='none',
                       relief='flat')
        
        style.map('Warning.TButton',
                 background=[('active', '#E0A800'),  # Hover rengi (daha koyu sarƒ±)
                           ('pressed', '#C69500')],  # Basƒ±lma rengi
                 foreground=[('active', ModernUI.COLORS['white']),
                           ('pressed', ModernUI.COLORS['white'])])

        # Danger Button - hover efektli
        style.configure('Danger.TButton',
                       background=ModernUI.COLORS['danger'],
                       foreground=ModernUI.COLORS['white'],
                       font=ModernUI.FONTS['button'],
                       padding=(16, 8),
                       borderwidth=0,
                       focuscolor='none',
                       relief='flat')
        
        style.map('Danger.TButton',
                 background=[('active', '#C82333'),  # Hover rengi (daha koyu kƒ±rmƒ±zƒ±)
                           ('pressed', '#A71E2A')],  # Basƒ±lma rengi
                 foreground=[('active', ModernUI.COLORS['white']),
                           ('pressed', ModernUI.COLORS['white'])])

    def setup_progress_style(self):
        """Progress bar √∂zel stilini ayarla"""
        style = ttk.Style()
        
        # Custom progress bar stili
        style.configure('Custom.Horizontal.TProgressbar',
                       background=ModernUI.COLORS['success'],
                       troughcolor=ModernUI.COLORS['light'],
                       borderwidth=0,
                       lightcolor=ModernUI.COLORS['success'],
                       darkcolor=ModernUI.COLORS['success'])

    def create_header(self):
        """Header b√∂l√ºm√ºn√º olu≈ütur - Gradient ve modern efektlerle"""
        # Ana header frame
        header_frame = tk.Frame(self.main_container, height=55)
        header_frame.pack(fill=tk.X, pady=(0, 15))
        header_frame.pack_propagate(False)

        # Gradient arka plan i√ßin Canvas
        self.header_canvas = tk.Canvas(header_frame, height=55, highlightthickness=0)
        self.header_canvas.pack(fill=tk.BOTH, expand=True)
        
        # Gradient olu≈ütur
        self.create_gradient_background()

        # ƒ∞√ßerik container - Canvas √ºzerine
        content_frame = tk.Frame(self.header_canvas, bg=ModernUI.COLORS['secondary'])
        
        # Canvas penceresini olu≈ütur
        canvas_window = self.header_canvas.create_window(0, 0, anchor='nw', window=content_frame)
        
        # Ana ba≈ülƒ±k b√∂l√ºm√º
        title_section = tk.Frame(content_frame, bg=ModernUI.COLORS['secondary'])
        title_section.pack(expand=True, fill=tk.BOTH)

        # Ba≈ülƒ±k ve ikon container - tek satƒ±rda
        title_frame = tk.Frame(title_section, bg=ModernUI.COLORS['secondary'])
        title_frame.pack(pady=(10, 10), expand=True)

        # Program simgesi
        try:
            from PIL import Image, ImageTk
            icon_path = Path(__file__).parent / "images" / "vesikolaypro.png"
            if icon_path.exists():
                icon_image = Image.open(icon_path)
                icon_image = icon_image.resize((24, 24), Image.Resampling.LANCZOS)
                self.header_icon = ImageTk.PhotoImage(icon_image)
                icon_widget = tk.Label(title_frame,
                                     image=self.header_icon,
                                     bg=ModernUI.COLORS['secondary'])
                icon_widget.pack(side=tk.LEFT, padx=(0, 8))
        except:
            pass

        # Ana ba≈ülƒ±k
        title_label = tk.Label(title_frame,
                              text="VesiKolayPro",
                              font=('Segoe UI', 16, 'bold'),
                              fg='white',
                              bg=ModernUI.COLORS['secondary'])
        title_label.pack(side=tk.LEFT, padx=(0, 15))

        # Alt ba≈ülƒ±k - aynƒ± satƒ±rda
        subtitle_label = tk.Label(title_frame,
                                 text="üìã Yeni Nesil Okul Fotoƒüraf√ßƒ±lƒ±ƒüƒ± Asistanƒ±",
                                 font=('Segoe UI', 11),
                                 fg='#FFFFFF',
                                 bg=ModernUI.COLORS['secondary'])
        subtitle_label.pack(side=tk.LEFT)

        # Canvas boyutunu g√ºncelle
        def update_canvas_size(event=None):
            self.header_canvas.configure(scrollregion=self.header_canvas.bbox("all"))
            canvas_width = self.header_canvas.winfo_width()
            self.header_canvas.itemconfig(canvas_window, width=canvas_width)
            
        self.header_canvas.bind('<Configure>', update_canvas_size)
        content_frame.bind('<Configure>', update_canvas_size)

    def create_gradient_background(self):
        """Header i√ßin gradient arka plan olu≈ütur"""
        def draw_gradient():
            width = self.header_canvas.winfo_width()
            height = self.header_canvas.winfo_height()
            
            if width <= 1 or height <= 1:
                self.header_canvas.after(100, draw_gradient)
                return
                
            # Gradient renkler
            start_color = (44, 62, 80)    # #2C3E50 (koyu mavi)
            end_color = (52, 152, 219)    # #3498DB (a√ßƒ±k mavi)
            
            # Canvas'ƒ± temizle
            self.header_canvas.delete("gradient")
            
            # Gradient √ßiz
            for i in range(height):
                ratio = i / height
                r = int(start_color[0] + (end_color[0] - start_color[0]) * ratio)
                g = int(start_color[1] + (end_color[1] - start_color[1]) * ratio)
                b = int(start_color[2] + (end_color[2] - start_color[2]) * ratio)
                
                color = f"#{r:02x}{g:02x}{b:02x}"
                self.header_canvas.create_line(0, i, width, i, fill=color, tags="gradient")
        
        # ƒ∞lk √ßizimi geciktir
        self.header_canvas.after(10, draw_gradient)

    def create_main_layout(self):
        """Ana layout (sol-saƒü split) olu≈ütur"""
        # Ana paned window
        self.main_paned = tk.PanedWindow(self.main_container, 
                                        orient=tk.HORIZONTAL,
                                        sashwidth=8,
                                        bg=ModernUI.COLORS['border'])
        self.main_paned.pack(fill=tk.BOTH, expand=True)

        # Sol panel (i≈ülem adƒ±mlarƒ±)
        self.left_panel = tk.Frame(self.main_paned, bg=ModernUI.COLORS['bg_main'])
        self.main_paned.add(self.left_panel, minsize=350, width=440)

        # Saƒü panel (sonu√ßlar ve durum)
        self.right_panel = tk.Frame(self.main_paned, bg=ModernUI.COLORS['bg_main'])
        self.main_paned.add(self.right_panel, minsize=280, width=380)

        # Sol panel i√ßeriƒüi
        self.create_left_panel_content()

        # Saƒü panel i√ßeriƒüi
        self.create_right_panel_content()

    def create_left_panel_content(self):
        """Sol panel i√ßeriƒüini olu≈ütur"""
        # Ba≈ülƒ±k
        left_title = tk.Label(self.left_panel,
                             text="ƒ∞≈ülem Adƒ±mlarƒ±",
                             font=ModernUI.FONTS['title'],
                             fg=ModernUI.COLORS['text'],
                             bg=ModernUI.COLORS['bg_main'])
        left_title.pack(pady=(0, 10), anchor='w')

        # Scroll alanƒ±
        canvas = tk.Canvas(self.left_panel, bg=ModernUI.COLORS['bg_main'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.left_panel, orient="vertical", command=canvas.yview)
        self.scrollable_frame = tk.Frame(canvas, bg=ModernUI.COLORS['bg_main'])

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # ƒ∞√ßerik kartlarƒ±
        self.create_step_cards()

        # Canvas pack
        canvas.pack(side="left", fill="both", expand=True, padx=(0, 5))
        scrollbar.pack(side="right", fill="y")

        # Mouse wheel binding - g√ºvenli versiyon
        def _on_mousewheel(event):
            try:
                if canvas.winfo_exists():
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            except (tk.TclError, Exception):
                try:
                    canvas.unbind_all("<MouseWheel>")
                except:
                    pass
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)

    def create_right_panel_content(self):
        """Saƒü panel i√ßeriƒüini olu≈ütur"""
        # ƒ∞lerleme kartƒ±
        self.create_progress_card()

        # Sonu√ßlar kartƒ±
        self.create_results_card()

        # Dosya eri≈üim kartƒ±
        self.create_file_access_card()

    def create_step_cards(self):
        """Adƒ±m kartlarƒ±nƒ± olu≈ütur"""
        # Adƒ±m 1: Okul Bilgisi
        self.create_school_info_card()

        # Adƒ±m 2: Excel Dosyasƒ±
        self.create_excel_card()

        # Adƒ±m 3: Fotoƒüraf Dizini
        self.create_photo_card()

        # Adƒ±m 4: ƒ∞≈ülem Ayarlarƒ±
        self.create_advanced_naming_card()
        
        # Adƒ±m 5: Fotoƒüraf ƒ∞≈üleme Ayarlarƒ±
        self.create_photo_processing_card()

        # Adƒ±m 6: ƒ∞≈ülem Butonlarƒ±
        self.create_action_card()

    def create_school_info_card(self):
        """Okul bilgisi kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 8), padx=5, ipady=6, ipadx=8)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "1", "Okul Bilgisi", 
                               "Okul adƒ±nƒ± girin (√ßƒ±ktƒ± klas√∂r√º adƒ± olarak kullanƒ±lacak)")

        # Okul adƒ± giri≈ü alanƒ±
        school_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        school_frame.pack(fill=tk.X, pady=(8, 0))

        school_label = tk.Label(school_frame,
                               text="Okul Adƒ±:",
                               font=ModernUI.FONTS['body'],
                               bg=ModernUI.COLORS['card_bg'])
        school_label.pack(side=tk.LEFT, padx=(0, 8))
        ToolTip(school_label, "Okulunuzun adƒ±nƒ± girin. Bu ad √ßƒ±ktƒ± klas√∂rlerinde kullanƒ±lacak.")

        self.school_name_var = tk.StringVar()
        school_entry = tk.Entry(school_frame,
                               textvariable=self.school_name_var,
                               font=ModernUI.FONTS['body'],
                               width=35)
        school_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        school_entry.bind('<KeyRelease>', self.on_school_name_change)
        ToolTip(school_entry, "Okul adƒ±nƒ±zƒ± buraya yazƒ±n. √ñrnek: 'Ankara Merkez ƒ∞mam Hatip Lisesi' veya 'Fatih Anadolu Lisesi'")

        # Eƒüitim-√∂ƒüretim yƒ±lƒ± giri≈üi
        year_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        year_frame.pack(fill=tk.X, pady=(8, 0))

        year_label = tk.Label(year_frame,
                             text="Eƒüitim-√ñƒüretim Yƒ±lƒ±:",
                             font=ModernUI.FONTS['body'],
                             bg=ModernUI.COLORS['card_bg'])
        year_label.pack(side=tk.LEFT)
        ToolTip(year_label, "Kimlik kartlarƒ±nda g√∂r√ºnecek eƒüitim-√∂ƒüretim yƒ±lƒ±")

        self.school_year_var = tk.StringVar(value="2025-2026")
        year_entry = tk.Entry(year_frame,
                             textvariable=self.school_year_var,
                             font=ModernUI.FONTS['body'],
                             width=15)
        year_entry.pack(side=tk.LEFT, padx=(8, 0))
        ToolTip(year_entry, "Format: '2025-2026' ≈üeklinde yazƒ±n. Bu bilgi kimlik kartlarƒ±nda g√∂r√ºnecek.")

    def on_school_name_change(self, event=None):
        """Okul adƒ± deƒüi≈ütiƒüinde √ßaƒürƒ±lƒ±r"""
        self.school_name = self.school_name_var.get().strip()
        # Boyutlandƒ±rma buton durumunu g√ºncelle
        self.update_crop_resize_button_state()
        # Watermark metnini g√ºncelle
        if hasattr(self, 'watermark_text_var') and not self.watermark_text_var.get():
            self.watermark_text_var.set(self.school_name)

    def on_sizing_naming_change(self):
        """Boyutlandƒ±rma adlandƒ±rma se√ßeneƒüi deƒüi≈ütiƒüinde √ßaƒürƒ±lƒ±r"""
        self.update_crop_resize_button_state()

    def update_crop_resize_button_state(self):
        """Boyutlandƒ±rma butonunun durumunu g√ºncelle"""
        if not hasattr(self, 'crop_resize_button'):
            return

        # Boyutlandƒ±rma aktif deƒüilse buton pasif
        if not self.sizing_enabled.get():
            self.crop_resize_button.config(state="disabled")
            return

        # Fotoƒüraf dizini se√ßilmeli
        if not self.photo_directory:
            self.crop_resize_button.config(state="disabled")
            return

        # Adlandƒ±rma se√ßeneƒüi aktifse okul adƒ± ve excel gerekli
        if self.sizing_with_naming.get():
            if not self.school_name or not self.excel_data:
                self.crop_resize_button.config(state="disabled")
                return

            # S√ºtun se√ßimi de gerekli
            selected_columns = self.get_selected_columns()
            if not selected_columns:
                self.crop_resize_button.config(state="disabled")
                return
        else:
            # Adlandƒ±rma yapƒ±lmayacaksa sadece okul adƒ± yeterli
            if not self.school_name:
                self.crop_resize_button.config(state="disabled")
                return

        # T√ºm ko≈üullar saƒülanmƒ±≈üsa aktif et
        self.crop_resize_button.config(state="normal")

    def update_all_button_states(self):
        """T√ºm buton durumlarƒ±nƒ± g√ºncelle"""
        # Adlandƒ±rma butonu - Kontrol Et √ßalƒ±≈ütƒ±rƒ±ldƒ±ktan sonra aktif olur
        rename_ready = (self.school_name and self.excel_data and self.photo_directory and 
                       self.get_selected_columns())
        
        # PDF ve kimlik kartƒ± butonlarƒ± - Adlandƒ±rma yapƒ±ldƒ±ktan sonra aktif olur
        # Bu kontrol check_counts fonksiyonunda yapƒ±lƒ±yor
        
        # Boyutlandƒ±rma butonunu g√ºncelle
        self.update_crop_resize_button_state()

    def on_size_selection_change(self, event=None):
        """Boyut se√ßimi deƒüi≈ütiƒüinde √ßaƒürƒ±lƒ±r"""
        selected_display = self.size_combo.get()
        selected_value = self.size_display_values.get(selected_display, "e_okul")

        if selected_value == "custom":
            self.custom_size_frame.pack(fill=tk.X, pady=(5, 0))
        else:
            self.custom_size_frame.pack_forget()

    def create_excel_card(self):
        """Excel dosyasƒ± se√ßim kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 8), padx=5, ipady=6, ipadx=8)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "2", "Excel Dosyasƒ±", 
                               "√ñƒürenci verilerini i√ßeren Excel dosyasƒ±nƒ± se√ßin")

        # Dosya se√ßim alanƒ± - tek satƒ±r
        file_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        file_frame.pack(fill=tk.X, pady=(8, 0))

        excel_button = ttk.Button(file_frame,
                                 text="üìÅ Se√ß",
                                 command=self.select_excel_file,
                                 style='Primary.TButton')
        excel_button.pack(side=tk.LEFT, padx=(0, 8))
        ToolTip(excel_button, "√ñƒürenci bilgilerini i√ßeren Excel dosyasƒ±nƒ± se√ßin (.xlsx veya .xls)")

        self.excel_path_var = tk.StringVar()
        self.excel_entry = ttk.Entry(file_frame,
                               textvariable=self.excel_path_var,
                               font=ModernUI.FONTS['body'],
                               state="readonly",
                               width=30)
        self.excel_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ToolTip(self.excel_entry, "Se√ßilen Excel dosyasƒ±nƒ±n yolu burada g√∂r√ºnecek")

    def create_photo_card(self):
        """Fotoƒüraf dizini se√ßim kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 8), padx=5, ipady=6, ipadx=8)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "3", "Fotoƒüraf Klas√∂r√º", 
                               "Adlandƒ±rƒ±lacak fotoƒüraflarƒ±n bulunduƒüu klas√∂r√º se√ßin")

        # Dizin se√ßim alanƒ± - tek satƒ±r
        dir_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        dir_frame.pack(fill=tk.X, pady=(8, 0))

        photo_button = ttk.Button(dir_frame,
                                 text="üìÇ Se√ß",
                                 command=self.select_photo_directory,
                                 style='Primary.TButton')
        photo_button.pack(side=tk.LEFT, padx=(0, 8))
        ToolTip(photo_button, "Adlandƒ±rƒ±lacak fotoƒüraflarƒ±n bulunduƒüu klas√∂r√º se√ßin")

        self.photo_dir_var = tk.StringVar()
        self.photo_entry = ttk.Entry(dir_frame,
                               textvariable=self.photo_dir_var,
                               font=ModernUI.FONTS['body'],
                               state="readonly",
                               width=30)
        self.photo_entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
        ToolTip(self.photo_entry, "Se√ßilen fotoƒüraf klas√∂r√ºn√ºn yolu burada g√∂r√ºnecek")

    def create_advanced_naming_card(self):
        """ƒ∞≈ülem ayarlarƒ± kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 10), padx=5, ipady=10, ipadx=10)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "4", "Adlandƒ±rma Ayarlarƒ±", 
                               "Fotoƒüraf adlandƒ±rma i√ßin kullanƒ±lacak s√ºtunlarƒ± se√ßin")

        # Adlandƒ±rma se√ßenekleri
        naming_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        naming_frame.pack(fill=tk.X, pady=(8, 0))

        # Tek s√ºtun se√ßimi
        single_frame = tk.Frame(naming_frame, bg=ModernUI.COLORS['card_bg'])
        single_frame.pack(fill=tk.X, pady=(0, 8))

        self.naming_type = tk.StringVar(value="single")
        single_radio = tk.Radiobutton(single_frame,
                                     text="Tek s√ºtun kullan:",
                                     variable=self.naming_type,
                                     value="single",
                                     bg=ModernUI.COLORS['card_bg'],
                                     font=ModernUI.FONTS['body'],
                                     command=self.update_naming_options)
        single_radio.pack(side=tk.LEFT)
        ToolTip(single_radio, "Fotoƒüraf adlandƒ±rma i√ßin tek bir Excel s√ºtunu kullanƒ±n (√ñrnek: Sadece 'Ad_Soyad')")

        self.column_var = tk.StringVar()
        self.column_combo = ttk.Combobox(single_frame,
                                        textvariable=self.column_var,
                                        font=ModernUI.FONTS['body'],
                                        width=25,
                                        state="readonly")
        self.column_combo.pack(side=tk.LEFT, padx=(8, 0))
        ToolTip(self.column_combo, "Excel'den hangi s√ºtunun dosya adƒ± olarak kullanƒ±lacaƒüƒ±nƒ± se√ßin")

        # √áoklu s√ºtun se√ßimi
        multi_frame = tk.Frame(naming_frame, bg=ModernUI.COLORS['card_bg'])
        multi_frame.pack(fill=tk.X, pady=(0, 5))

        multi_radio = tk.Radiobutton(multi_frame,
                                    text="√áoklu s√ºtun kullan (birle≈ütirilmi≈ü):",
                                    variable=self.naming_type,
                                    value="multiple",
                                    bg=ModernUI.COLORS['card_bg'],
                                    font=ModernUI.FONTS['body'],
                                    command=self.update_naming_options)
        multi_radio.pack(side=tk.LEFT)
        ToolTip(multi_radio, "Birden fazla Excel s√ºtununu birle≈ütirerek dosya adƒ± olu≈üturun (√ñrnek: 'Ad'+'Soyad'+'Sƒ±nƒ±f')")

        # √áoklu s√ºtun se√ßim alanƒ± (hemen altta, kompakt tasarƒ±m)
        self.multi_columns_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        self.multi_columns_frame.pack(fill=tk.X, pady=(0, 8))
        self.multi_columns_frame.pack_forget()  # Ba≈ülangƒ±√ßta gizli

        # Ayra√ß se√ßimi
        separator_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        separator_frame.pack(fill=tk.X, pady=(0, 8))

        separator_label = tk.Label(separator_frame,
                                  text="S√ºtunlar arasƒ± ayra√ß:",
                                  font=ModernUI.FONTS['body'],
                                  bg=ModernUI.COLORS['card_bg'])
        separator_label.pack(side=tk.LEFT)
        ToolTip(separator_label, "√áoklu s√ºtun kullanƒ±rken s√ºtunlar arasƒ±nda hangi karakter kullanƒ±lacak")

        self.separator_var = tk.StringVar(value="_")
        separator_combo = ttk.Combobox(separator_frame,
                                      textvariable=self.separator_var,
                                      values=["_", "-", " ", "."],
                                      font=ModernUI.FONTS['body'],
                                      width=5,
                                      state="readonly")
        separator_combo.pack(side=tk.LEFT, padx=(8, 0))
        ToolTip(separator_combo, "Se√ßim: '_' = alt √ßizgi, '-' = tire, ' ' = bo≈üluk, '.' = nokta")

        # Sƒ±nƒ±f bazƒ±nda organizasyon
        org_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        org_frame.pack(fill=tk.X, pady=(5, 0))

        self.organize_by_class = tk.BooleanVar()
        class_checkbox = tk.Checkbutton(org_frame,
                                       text="Fotoƒüraflarƒ± sƒ±nƒ±flara g√∂re ayrƒ± klas√∂rlere kopyala",
                                       variable=self.organize_by_class,
                                       bg=ModernUI.COLORS['card_bg'],
                                       font=ModernUI.FONTS['body'])
        class_checkbox.pack(side=tk.LEFT)
        ToolTip(class_checkbox, "ƒ∞≈üaretlenirse: Adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflar ayrƒ±ca sƒ±nƒ±f bazƒ±nda ayrƒ± klas√∂rlere de kopyalanƒ±r")

    def create_photo_processing_card(self):
        """Fotoƒüraf i≈üleme ayarlarƒ± kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 10), padx=5, ipady=8, ipadx=10)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "5", "Fotoƒüraf ƒ∞≈üleme Ayarlarƒ±", 
                               "Boyutlandƒ±rma, kƒ±rpma ve watermark ayarlarƒ±")

        # ƒ∞√ßerik container
        content_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        content_frame.pack(fill=tk.X, pady=(10, 5))

        # Boyutlandƒ±rma ayarlarƒ±
        sizing_frame = tk.LabelFrame(content_frame, 
                                   text="‚úÇÔ∏è Fotoƒüraf Boyutlandƒ±rma",
                                   bg=ModernUI.COLORS['card_bg'],
                                   font=ModernUI.FONTS['body'])
        sizing_frame.pack(fill=tk.X, pady=(0, 8))

        # Boyutlandƒ±rma aktif/pasif
        sizing_enable_row = tk.Frame(sizing_frame, bg=ModernUI.COLORS['card_bg'])
        sizing_enable_row.pack(fill=tk.X, padx=8, pady=5)

        self.sizing_enabled = tk.BooleanVar()
        sizing_checkbox = tk.Checkbutton(sizing_enable_row,
                                       text="üîß Fotoƒüraflarƒ± boyutlandƒ±r ve kƒ±rp",
                                       variable=self.sizing_enabled,
                                       command=self.toggle_sizing_options,
                                       bg=ModernUI.COLORS['card_bg'],
                                       font=ModernUI.FONTS['body'])
        sizing_checkbox.pack(side=tk.LEFT)
        ToolTip(sizing_checkbox, "Fotoƒüraflarƒ± belirli boyutlara kƒ±rpƒ±p yeniden boyutlandƒ±rƒ±r (E-Okul, vesikalƒ±k vb.)")

        # Boyutlandƒ±rma se√ßenekleri frame
        self.sizing_options_frame = tk.Frame(sizing_frame, bg=ModernUI.COLORS['card_bg'])
        self.sizing_options_frame.pack(fill=tk.X, padx=8, pady=5)

        # Boyut se√ßimi
        size_selection_row = tk.Frame(self.sizing_options_frame, bg=ModernUI.COLORS['card_bg'])
        size_selection_row.pack(fill=tk.X, pady=(0, 8))

        tk.Label(size_selection_row, text="üìè Fotoƒüraf Boyutu:", 
                bg=ModernUI.COLORS['card_bg'], font=ModernUI.FONTS['body'],
                width=18, anchor='w').pack(side=tk.LEFT)

        self.size_type = tk.StringVar(value="e_okul")
        size_options = [
            ("35mm x 45mm (E-Okul) - 20-150 KB", "e_okul"),
            ("394px x 512px (A√ßƒ±k Lise) - Max 150 KB", "acik_lise"),
            ("394px x 512px (MEBBIS) - Max 150 KB", "mebbis"),
            ("50mm x 60mm (Biyometrik)", "biometric"),
            ("45mm x 60mm (Vesikalƒ±k)", "vesikalik"),
            ("35mm x 35mm (Pasaport/Vize)", "passport"),
            ("25mm x 35mm (Ehliyet)", "license"),
            ("√ñzel boyut", "custom")
        ]

        self.size_combo = ttk.Combobox(size_selection_row,
                                      textvariable=self.size_type,
                                      values=[option[0] for option in size_options],
                                      font=ModernUI.FONTS['body'],
                                      width=30,
                                      state="readonly")

        # Combobox deƒüerlerini g√∂r√ºnen metinlerle e≈üle
        self.size_display_values = {option[0]: option[1] for option in size_options}
        self.size_value_to_display = {option[1]: option[0] for option in size_options}
        self.size_combo.bind('<<ComboboxSelected>>', self.on_size_selection_change)

        # ƒ∞lk deƒüeri ayarla
        self.size_combo.set("35mm x 45mm (E-Okul) - 20-150 KB")
        self.size_combo.pack(side=tk.LEFT, padx=(5, 0))
        ToolTip(self.size_combo, "Fotoƒüraflarƒ±n kƒ±rpƒ±lacaƒüƒ± boyutu se√ßin:\n‚Ä¢ E-Okul: 35x45mm, max 150KB\n‚Ä¢ A√ßƒ±k Lise: 394x512px, 400DPI\n‚Ä¢ Vesikalƒ±k: 45x60mm\n‚Ä¢ √ñzel boyut: Kendi boyutunuzu belirleyin")

        # √ñzel boyut giri≈üi (ba≈ülangƒ±√ßta gizli)
        self.custom_size_frame = tk.Frame(self.sizing_options_frame, bg=ModernUI.COLORS['card_bg'])
        self.custom_size_frame.pack(fill=tk.X, pady=(5, 0))

        # Boyut giri≈üi b√∂l√ºm√º
        size_input_row = tk.Frame(self.custom_size_frame, bg=ModernUI.COLORS['card_bg'])
        size_input_row.pack(fill=tk.X, pady=(0, 5))

        tk.Label(size_input_row, text="üìê √ñzel boyut:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body'], width=18, anchor='w').pack(side=tk.LEFT)

        size_inputs_frame = tk.Frame(size_input_row, bg=ModernUI.COLORS['card_bg'])
        size_inputs_frame.pack(side=tk.LEFT, padx=(5, 0))

        tk.Label(size_inputs_frame, text="Geni≈ülik:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body']).pack(side=tk.LEFT)
        self.custom_width_var = tk.StringVar(value="35")
        tk.Entry(size_inputs_frame, textvariable=self.custom_width_var, 
                font=ModernUI.FONTS['body'], width=6).pack(side=tk.LEFT, padx=(5, 8))

        tk.Label(size_inputs_frame, text="Y√ºkseklik:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body']).pack(side=tk.LEFT)
        self.custom_height_var = tk.StringVar(value="45")
        tk.Entry(size_inputs_frame, textvariable=self.custom_height_var, 
                font=ModernUI.FONTS['body'], width=6).pack(side=tk.LEFT, padx=(5, 8))

        # √ñl√ß√º birimi se√ßimi
        self.custom_unit_var = tk.StringVar(value="mm")
        unit_combo = ttk.Combobox(size_inputs_frame,
                                 textvariable=self.custom_unit_var,
                                 values=["mm", "cm", "px"],
                                 font=ModernUI.FONTS['body'],
                                 width=5,
                                 state="readonly")
        unit_combo.pack(side=tk.LEFT, padx=(5, 0))

        # DPI ve dosya boyutu
        advanced_row = tk.Frame(self.custom_size_frame, bg=ModernUI.COLORS['card_bg'])
        advanced_row.pack(fill=tk.X, pady=(5, 0))

        tk.Label(advanced_row, text="‚öôÔ∏è Geli≈ümi≈ü:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body'], width=18, anchor='w').pack(side=tk.LEFT)

        advanced_inputs_frame = tk.Frame(advanced_row, bg=ModernUI.COLORS['card_bg'])
        advanced_inputs_frame.pack(side=tk.LEFT, padx=(5, 0))

        tk.Label(advanced_inputs_frame, text="DPI:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body']).pack(side=tk.LEFT)
        self.custom_dpi_var = tk.StringVar(value="300")
        tk.Entry(advanced_inputs_frame, textvariable=self.custom_dpi_var, 
                font=ModernUI.FONTS['body'], width=6).pack(side=tk.LEFT, padx=(5, 15))

        tk.Label(advanced_inputs_frame, text="Max KB:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body']).pack(side=tk.LEFT)
        self.custom_max_size_var = tk.StringVar(value="")
        tk.Entry(advanced_inputs_frame, textvariable=self.custom_max_size_var, 
                font=ModernUI.FONTS['body'], width=6).pack(side=tk.LEFT, padx=(5, 5))
        tk.Label(advanced_inputs_frame, text="(bo≈ü=sƒ±nƒ±rsƒ±z)", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['small']).pack(side=tk.LEFT)

        # Ba≈ülangƒ±√ßta √∂zel boyut frame'ini gizle
        self.custom_size_frame.pack_forget()

        # Adlandƒ±rma se√ßeneƒüi (boyutlandƒ±rma i√ßin)
        naming_row = tk.Frame(self.sizing_options_frame, bg=ModernUI.COLORS['card_bg'])
        naming_row.pack(fill=tk.X, pady=(8, 5))

        self.sizing_with_naming = tk.BooleanVar(value=False)
        naming_checkbox = tk.Checkbutton(naming_row,
                                       text="üìù Boyutlandƒ±rma sƒ±rasƒ±nda fotoƒüraflarƒ± yeniden adlandƒ±r",
                                       variable=self.sizing_with_naming,
                                       command=self.on_sizing_naming_change,
                                       bg=ModernUI.COLORS['card_bg'],
                                       font=ModernUI.FONTS['body'])
        naming_checkbox.pack(side=tk.LEFT)

        # Boyutlandƒ±rma se√ßeneklerini varsayƒ±lan olarak gizle
        self.sizing_enabled.set(False)  # Ba≈ülangƒ±√ßta pasif olsun
        self.sizing_options_frame.pack_forget()  # Ba≈ülangƒ±√ßta gizli

        # Watermark ayarlarƒ±
        watermark_frame = tk.LabelFrame(content_frame, 
                                       text="üè∑Ô∏è Watermark Ayarlarƒ±",
                                       bg=ModernUI.COLORS['card_bg'],
                                       font=ModernUI.FONTS['body'])
        watermark_frame.pack(fill=tk.X, pady=(0, 0))

        # Watermark aktif/pasif
        watermark_enable_row = tk.Frame(watermark_frame, bg=ModernUI.COLORS['card_bg'])
        watermark_enable_row.pack(fill=tk.X, padx=8, pady=5)

        self.watermark_enabled = tk.BooleanVar()
        watermark_checkbox = tk.Checkbutton(watermark_enable_row,
                                          text="‚ú® Fotoƒüraflara watermark ekle",
                                          variable=self.watermark_enabled,
                                          command=self.toggle_watermark_options,
                                          bg=ModernUI.COLORS['card_bg'],
                                          font=ModernUI.FONTS['body'])
        watermark_checkbox.pack(side=tk.LEFT)
        ToolTip(watermark_checkbox, "Fotoƒüraflarƒ±n saƒü alt k√∂≈üesine okul adƒ± veya √∂zel metin ekler")
        
        # PNG uyarƒ± etiketi - ayrƒ± satƒ±rda
        png_watermark_row = tk.Frame(watermark_frame, bg=ModernUI.COLORS['card_bg'])
        png_watermark_row.pack(fill=tk.X, padx=8, pady=(5, 0))
        
        png_watermark_label = tk.Label(png_watermark_row,
                                     text="üí° JPG formatƒ±nda daha iyi sonu√ß alƒ±rsƒ±nƒ±z",
                                     font=ModernUI.FONTS['small'],
                                     fg=ModernUI.COLORS['text_light'],
                                     bg=ModernUI.COLORS['card_bg'])
        png_watermark_label.pack(anchor='w')

        # Watermark se√ßenekleri frame
        self.watermark_options_frame = tk.Frame(watermark_frame, bg=ModernUI.COLORS['card_bg'])
        self.watermark_options_frame.pack(fill=tk.X, padx=8, pady=5)

        self.watermark_type = tk.StringVar(value="text")

        # Metin giri≈üi
        self.text_frame = tk.Frame(self.watermark_options_frame, bg=ModernUI.COLORS['card_bg'])
        self.text_frame.pack(fill=tk.X, pady=(0, 5))

        tk.Label(self.text_frame, text="üí¨ Watermark Metni:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body'], width=18, anchor='w').pack(side=tk.LEFT)
        self.watermark_text_var = tk.StringVar(value=self.school_name if hasattr(self, 'school_name') else "")
        self.watermark_text_entry = tk.Entry(self.text_frame, textvariable=self.watermark_text_var, 
                                            font=ModernUI.FONTS['body'])
        self.watermark_text_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 0))
        ToolTip(self.watermark_text_entry, "Fotoƒüraflara eklenecek yazƒ±yƒ± girin. Genellikle okul adƒ± kullanƒ±lƒ±r.")

        # Logo se√ßimi (kimlik kartlarƒ± i√ßin)
        self.logo_frame = tk.Frame(self.watermark_options_frame, bg=ModernUI.COLORS['card_bg'])
        self.logo_frame.pack(fill=tk.X, pady=(0, 5))

        tk.Label(self.logo_frame, text="üñºÔ∏è Okul Logosu:", bg=ModernUI.COLORS['card_bg'], 
                font=ModernUI.FONTS['body'], width=18, anchor='w').pack(side=tk.LEFT)

        self.logo_path_var = tk.StringVar()
        self.logo_entry = tk.Entry(self.logo_frame,
                               textvariable=self.logo_path_var, font=ModernUI.FONTS['body'], 
                               state="readonly")
        self.logo_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 8))

        logo_button = ttk.Button(self.logo_frame, text="Logo Se√ß", 
                               command=self.select_school_logo, style='Primary.TButton')
        logo_button.pack(side=tk.LEFT)

        # Watermark se√ßeneklerini varsayƒ±lan olarak gizle
        self.watermark_enabled.set(False)  # Ba≈ülangƒ±√ßta pasif olsun
        self.watermark_options_frame.pack_forget()  # Ba≈ülangƒ±√ßta gizli

        self.column_checkboxes = {}
        self.column_order = []  # S√ºtun sƒ±rasƒ± i√ßin

    def create_action_card(self):
        """ƒ∞≈ülem butonlarƒ± kartƒ±"""
        card_frame = tk.Frame(self.scrollable_frame, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 10), padx=5, ipady=10, ipadx=10)

        # Ba≈ülƒ±k
        self.create_card_header(card_frame, "6", "ƒ∞≈ülemler", 
                               "Fotoƒüraf adlandƒ±rma ve PDF olu≈üturma i≈ülemlerini ba≈ülatƒ±n")

        # PNG bilgi metni (ba≈ülƒ±k altƒ±nda)
        info_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        info_frame.pack(fill=tk.X, pady=(8, 0))

        png_info_label = tk.Label(info_frame,
                                 text="üí° En iyi sonu√ß i√ßin JPG formatƒ±ndaki dosyalarƒ± kullanƒ±n",
                                 font=ModernUI.FONTS['small'],
                                 fg=ModernUI.COLORS['text_light'],
                                 bg=ModernUI.COLORS['card_bg'])
        png_info_label.pack(anchor='w')

        # ƒ∞ptal butonu container (en √ºstte, merkezi)
        self.cancel_container = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        self.cancel_container.pack(fill=tk.X, pady=(8, 0))

        # ƒ∞ptal butonu (ba≈ülangƒ±√ßta gizli)
        self.cancel_button = ttk.Button(self.cancel_container,
                                       text="‚èπÔ∏è ƒ∞≈ülemi Durdur",
                                       command=self.cancel_operation,
                                       style='Danger.TButton')
        self.cancel_button.pack(pady=(0, 8))
        self.cancel_container.pack_forget()

        # Buton listesi (tek s√ºtun d√ºzen)
        button_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        button_frame.pack(fill=tk.X, pady=(8, 0))

        # Kontrol butonu
        check_button = ttk.Button(button_frame,
                                 text="üîç Kontrol Et",
                                 command=self.handle_check_button_click,
                                 style='Primary.TButton')
        check_button.pack(fill=tk.X, pady=(0, 4))
        ToolTip(check_button, "Excel ve fotoƒüraf sayƒ±larƒ±nƒ± kontrol eder. ƒ∞≈ülem √∂ncesi mutlaka √ßalƒ±≈ütƒ±rƒ±n!")

        # Adlandƒ±rma butonu
        self.rename_button = ttk.Button(button_frame,
                                       text="‚ú® Fotoƒüraflarƒ± Adlandƒ±r",
                                       command=self.handle_rename_button_click,
                                       state="disabled",
                                       style='Success.TButton')
        self.rename_button.pack(fill=tk.X, pady=(0, 4))
        ToolTip(self.rename_button, "Fotoƒüraflarƒ± Excel verilerine g√∂re yeniden adlandƒ±rƒ±r. √ñnce 'Kontrol Et' √ßalƒ±≈ütƒ±rƒ±n.")

        # Boyutlandƒ±rma butonu
        self.crop_resize_button = ttk.Button(button_frame,
                                           text="‚úÇÔ∏è Fotoƒüraflarƒ± Kƒ±rp ve Boyutlandƒ±r",
                                           command=self.handle_crop_resize_button_click,
                                           state="disabled",
                                           style='Success.TButton')
        self.crop_resize_button.pack(fill=tk.X, pady=(0, 4))
        ToolTip(self.crop_resize_button, "Fotoƒüraflarƒ± se√ßilen boyutlara kƒ±rpar ve yeniden boyutlandƒ±rƒ±r (E-Okul, vesikalƒ±k vb.)")

        # PDF butonu
        self.pdf_button = ttk.Button(button_frame,
                                    text="üìÑ Sƒ±nƒ±f PDF'lerini Olu≈ütur",
                                    command=self.handle_pdf_button_click,
                                    state="disabled",
                                    style='Warning.TButton')
        self.pdf_button.pack(fill=tk.X, pady=(0, 4))
        ToolTip(self.pdf_button, "Her sƒ±nƒ±f i√ßin fotoƒüraf listesi PDF'i olu≈üturur. √ñnce fotoƒüraflarƒ± adlandƒ±rƒ±n.")

        # Kimlik kartƒ± butonu
        self.id_card_button = ttk.Button(button_frame,
                                        text="üÜî Kimlik Kartlarƒ± Olu≈ütur",
                                        command=self.handle_id_card_button_click,
                                        state="disabled",
                                        style='Warning.TButton')
        self.id_card_button.pack(fill=tk.X, pady=(0, 0))
        ToolTip(self.id_card_button, "√ñƒürenci kimlik kartlarƒ± olu≈üturur. √ñnce fotoƒüraflarƒ± adlandƒ±rƒ±n.")

    def create_progress_card(self):
        """ƒ∞lerleme kartƒ± - Renkli durum g√∂stergeleri ile"""
        card_frame = tk.Frame(self.right_panel, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 10), padx=5, ipady=8, ipadx=10)

        # Ba≈ülƒ±k b√∂l√ºm√º
        title_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        title_frame.pack(fill=tk.X, pady=(0, 10))

        # Ba≈ülƒ±k ikonu ve metin
        title_icon = tk.Label(title_frame,
                             text="üìä",
                             font=('Segoe UI', 14),
                             bg=ModernUI.COLORS['card_bg'])
        title_icon.pack(side=tk.LEFT, padx=(0, 8))

        progress_title = tk.Label(title_frame,
                                 text="ƒ∞lerleme Durumu",
                                 font=ModernUI.FONTS['subtitle'],
                                 fg=ModernUI.COLORS['text'],
                                 bg=ModernUI.COLORS['card_bg'])
        progress_title.pack(side=tk.LEFT)

        # Durum ikonu (dinamik)
        self.progress_status_icon = tk.Label(title_frame,
                                           text="üü¢",
                                           font=('Segoe UI', 12),
                                           bg=ModernUI.COLORS['card_bg'])
        self.progress_status_icon.pack(side=tk.RIGHT)

        # ƒ∞lerleme √ßubuƒüu b√∂l√ºm√º
        progress_section = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        progress_section.pack(fill=tk.X, pady=(0, 3))

        # ƒ∞lerleme √ßubuƒüu
        self.progress = ttk.Progressbar(progress_section,
                                       mode='determinate',
                                       length=300,
                                       style='Custom.Horizontal.TProgressbar')
        self.progress.pack(fill=tk.X)

        # Y√ºzde g√∂stergesi - daha belirgin
        self.progress_percent = tk.Label(progress_section,
                                        text="0%",
                                        font=('Segoe UI', 10, 'bold'),
                                        fg=ModernUI.COLORS['success'],
                                        bg=ModernUI.COLORS['card_bg'])
        self.progress_percent.pack(pady=(2, 0))

        # Durum detay b√∂l√ºm√º - kompakt
        status_section = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        status_section.pack(fill=tk.X, pady=(1, 0))

        # Ana durum label
        self.status_label = tk.Label(status_section,
                                    text="üöÄ Hazƒ±r - ƒ∞≈ülem bekliyor",
                                    font=('Segoe UI', 11, 'bold'),
                                    fg=ModernUI.COLORS['secondary'],
                                    bg=ModernUI.COLORS['card_bg'])
        self.status_label.pack(anchor='w', pady=(0, 0))

        # Detay durum label (opsiyonel) - daha kompakt
        self.status_detail = tk.Label(status_section,
                                     text="",
                                     font=('Segoe UI', 9, 'bold'),
                                     fg=ModernUI.COLORS['text_light'],
                                     bg=ModernUI.COLORS['card_bg'])
        self.status_detail.pack(anchor='w', pady=(0, 0))

        # Progress bar stilini √∂zelle≈ütir
        self.setup_progress_style()

    def create_results_card(self):
        """Sonu√ßlar kartƒ±"""
        card_frame = tk.Frame(self.right_panel, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10), padx=5, ipady=10, ipadx=10)

        # Ba≈ülƒ±k
        results_title = tk.Label(card_frame,
                                text="üìã ƒ∞≈ülem Ge√ßmi≈üi",
                                font=ModernUI.FONTS['subtitle'],
                                fg=ModernUI.COLORS['text'],
                                bg=ModernUI.COLORS['card_bg'])
        results_title.pack(anchor='w', pady=(0, 8))

        # Log alanƒ±
        text_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        text_frame.pack(fill=tk.BOTH, expand=True)
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)

        self.status_text = tk.Text(text_frame,
                                  wrap=tk.WORD,
                                  font=('Consolas', 9),
                                  bg=ModernUI.COLORS['light'],
                                  fg=ModernUI.COLORS['text'],
                                  relief='sunken',
                                  bd=1,
                                  padx=8,
                                  pady=8)

        status_scrollbar = ttk.Scrollbar(text_frame,
                                        orient="vertical",
                                        command=self.status_text.yview)
        self.status_text.configure(yscrollcommand=status_scrollbar.set)

        self.status_text.grid(row=0, column=0, sticky="nsew")
        status_scrollbar.grid(row=0, column=1, sticky="ns")

        # ƒ∞lk mesaj
        self.log_message("üöÄ VesiKolay Pro ba≈ülatƒ±ldƒ±.")
        self.log_message("üìã Adƒ±mlarƒ± takip ederek Excel dosyasƒ± ve fotoƒüraf dizini se√ßin.")

    def create_file_access_card(self):
        """Dosya eri≈üim kartƒ±"""
        card_frame = tk.Frame(self.right_panel, 
                             bg=ModernUI.COLORS['card_bg'],
                             relief='solid',
                             bd=1)
        card_frame.pack(fill=tk.X, pady=(0, 0), padx=5, ipady=10, ipadx=10)

        # Ba≈ülƒ±k
        access_title = tk.Label(card_frame,
                               text="üóÇÔ∏è Dosya Eri≈üimi",
                               font=ModernUI.FONTS['subtitle'],
                               fg=ModernUI.COLORS['text'],
                               bg=ModernUI.COLORS['card_bg'])
        access_title.pack(anchor='w', pady=(0, 8))

        # Butonlar
        access_frame = tk.Frame(card_frame, bg=ModernUI.COLORS['card_bg'])
        access_frame.pack(fill=tk.X)

        self.output_access_button = ttk.Button(access_frame,
                                              text="üìÅ √áƒ±ktƒ± Klas√∂r√º",
                                              command=self.open_output_directory,
                                              state="disabled",
                                              style='Warning.TButton')
        self.output_access_button.pack(side=tk.LEFT, padx=(0, 8))
        ToolTip(self.output_access_button, "Ana √ßƒ±ktƒ± klas√∂r√ºn√º a√ßar. ƒ∞≈ülem sonrasƒ± adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflarƒ± g√∂rebilirsiniz.")

        self.pdf_access_button = ttk.Button(access_frame,
                                           text="üìÑ PDF Klas√∂r√º",
                                           command=self.open_pdf_directory,
                                           state="disabled",
                                           style='Warning.TButton')
        self.pdf_access_button.pack(side=tk.LEFT, padx=(0, 8))
        ToolTip(self.pdf_access_button, "Olu≈üturulan sƒ±nƒ±f PDF'lerinin bulunduƒüu klas√∂r√º a√ßar.")

        # Kimlik kartlarƒ± eri≈üim butonu
        self.id_cards_access_button = ttk.Button(access_frame,
                                                text="üÜî Kimlik Kartlarƒ±",
                                                command=self.open_id_cards_directory,
                                                state="disabled",
                                                style='Warning.TButton')
        self.id_cards_access_button.pack(side=tk.LEFT)
        ToolTip(self.id_cards_access_button, "Olu≈üturulan kimlik kartƒ± PDF'lerinin bulunduƒüu klas√∂r√º a√ßar.")

    def create_card_header(self, parent, step_num, title, description):
        """Kart ba≈ülƒ±ƒüƒ± olu≈ütur - Dinamik durum ikonlarƒ± ile"""
        header_frame = tk.Frame(parent, bg=ModernUI.COLORS['card_bg'])
        header_frame.pack(fill=tk.X, pady=(0, 8))

        # Sol taraf - Adƒ±m numarasƒ± ve durum
        left_section = tk.Frame(header_frame, bg=ModernUI.COLORS['card_bg'])
        left_section.pack(side=tk.LEFT, padx=(0, 12))

        # Adƒ±m numarasƒ± - daha modern circular tasarƒ±m
        step_label = tk.Label(left_section,
                             text=step_num,
                             font=('Segoe UI', 12, 'bold'),
                             fg=ModernUI.COLORS['white'],
                             bg=ModernUI.COLORS['secondary'],
                             width=3, height=1,
                             relief='flat')
        step_label.pack()

        # Durum ikonu - dinamik
        status_icon = self.get_step_status_icon(step_num)
        self.step_status_icons = getattr(self, 'step_status_icons', {})
        
        status_label = tk.Label(left_section,
                               text=status_icon,
                               font=('Segoe UI', 14),
                               bg=ModernUI.COLORS['card_bg'])
        status_label.pack(pady=(2, 0))
        
        # ƒ∞konu kaydet (daha sonra g√ºncellemek i√ßin)
        self.step_status_icons[step_num] = status_label

        # Saƒü taraf - Ba≈ülƒ±k ve a√ßƒ±klama
        text_frame = tk.Frame(header_frame, bg=ModernUI.COLORS['card_bg'])
        text_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)

        # Ba≈ülƒ±k - ikon ile birlikte
        title_container = tk.Frame(text_frame, bg=ModernUI.COLORS['card_bg'])
        title_container.pack(anchor='w', fill=tk.X)

        # K√º√ß√ºk dekoratif ikon
        deco_icon = tk.Label(title_container,
                            text="üîπ",
                            font=('Segoe UI', 10),
                            fg=ModernUI.COLORS['secondary'],
                            bg=ModernUI.COLORS['card_bg'])
        deco_icon.pack(side=tk.LEFT, padx=(0, 5))

        title_label = tk.Label(title_container,
                              text=title,
                              font=ModernUI.FONTS['subtitle'],
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['card_bg'])
        title_label.pack(side=tk.LEFT)

        # A√ßƒ±klama
        desc_label = tk.Label(text_frame,
                             text=description,
                             font=ModernUI.FONTS['small'],
                             fg=ModernUI.COLORS['text_light'],
                             bg=ModernUI.COLORS['card_bg'])
        desc_label.pack(anchor='w', padx=(15, 0))

    def get_step_status_icon(self, step_num):
        """Adƒ±m durumuna g√∂re ikon d√∂nd√ºr"""
        # Ba≈ülangƒ±√ßta t√ºm adƒ±mlar beklemede
        status_icons = {
            "pending": "‚è≥",      # Beklemede
            "active": "üü¢",      # Aktif/Hazƒ±r
            "warning": "üü°",     # Uyarƒ±
            "error": "üî¥",       # Hata
            "completed": "‚úÖ"    # Tamamlandƒ±
        }
        return status_icons["pending"]

    def update_step_status(self, step_num, status):
        """Adƒ±m durumunu g√ºncelle"""
        if not hasattr(self, 'step_status_icons'):
            return
            
        if step_num in self.step_status_icons:
            status_icons = {
                "pending": "‚è≥",
                "active": "üü¢", 
                "warning": "üü°",
                "error": "üî¥",
                "completed": "‚úÖ"
            }
            
            if status in status_icons:
                self.step_status_icons[step_num].config(text=status_icons[status])

    def update_naming_options(self):
        """Adlandƒ±rma se√ßeneklerine g√∂re UI'ƒ± g√ºncelle"""
        if self.naming_type.get() == "multiple":
            # √áoklu s√ºtun frame'ini hemen se√ßenekten sonra g√∂ster
            self.multi_columns_frame.pack(fill=tk.X, pady=(5, 8), after=self.multi_columns_frame.master.children[list(self.multi_columns_frame.master.children.keys())[1]])
            self.update_column_ordering_interface()
        else:
            self.multi_columns_frame.pack_forget()
        # Boyutlandƒ±rma buton durumunu g√ºncelle
        self.update_crop_resize_button_state()

    def update_column_ordering_interface(self):
        """S√ºtun sƒ±ralama aray√ºz√ºn√º g√ºncelle - Kompakt ve modern tasarƒ±m"""
        # √ñnce t√ºm widget'larƒ± temizle
        for widget in self.multi_columns_frame.winfo_children():
            widget.destroy()

        if not self.available_columns:
            no_data_label = tk.Label(self.multi_columns_frame,
                                    text="üìã Excel dosyasƒ± y√ºklendiƒüinde s√ºtunlar burada g√∂r√ºnecek",
                                    font=ModernUI.FONTS['small'],
                                    fg=ModernUI.COLORS['text_light'],
                                    bg=ModernUI.COLORS['card_bg'])
            no_data_label.pack(pady=8)
            return

        # Ba≈ülƒ±k
        title_label = tk.Label(self.multi_columns_frame,
                              text="üìä Kullanƒ±lacak S√ºtunlarƒ± Se√ßin ve Sƒ±ralayƒ±n:",
                              font=ModernUI.FONTS['subtitle'],
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['card_bg'])
        title_label.pack(pady=(5, 8))

        # Ana container - daha kompakt
        main_container = tk.Frame(self.multi_columns_frame, bg=ModernUI.COLORS['card_bg'])
        main_container.pack(fill=tk.X, padx=8, pady=(0, 8))

        # Sol taraf - Mevcut s√ºtunlar
        left_section = tk.Frame(main_container, bg=ModernUI.COLORS['card_bg'])
        left_section.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 8))

        tk.Label(left_section, text="Mevcut S√ºtunlar:", 
                font=ModernUI.FONTS['body'], fg=ModernUI.COLORS['text'], 
                bg=ModernUI.COLORS['card_bg']).pack(anchor='w')

        self.available_listbox = tk.Listbox(left_section, height=5, font=ModernUI.FONTS['small'],
                                           relief='solid', bd=1)
        for column in self.available_columns:
            self.available_listbox.insert(tk.END, column)
        self.available_listbox.pack(fill=tk.BOTH, expand=True, pady=(2, 0))

        # Orta - Butonlar (dikey)
        button_section = tk.Frame(main_container, bg=ModernUI.COLORS['card_bg'])
        button_section.pack(side=tk.LEFT, padx=5)

        # Bo≈üluk i√ßin
        tk.Label(button_section, text="", bg=ModernUI.COLORS['card_bg']).pack(pady=10)

        add_button = ttk.Button(button_section, text="‚Üí", width=3,
                               command=self.add_column_to_selection,
                               style='Primary.TButton')
        add_button.pack(pady=1)

        remove_button = ttk.Button(button_section, text="‚Üê", width=3,
                                  command=self.remove_column_from_selection,
                                  style='Warning.TButton')
        remove_button.pack(pady=1)

        tk.Frame(button_section, height=5, bg=ModernUI.COLORS['card_bg']).pack()

        up_button = ttk.Button(button_section, text="‚Üë", width=3,
                              command=self.move_column_up,
                              style='Primary.TButton')
        up_button.pack(pady=1)

        down_button = ttk.Button(button_section, text="‚Üì", width=3,
                                command=self.move_column_down,
                                style='Primary.TButton')
        down_button.pack(pady=1)

        # Saƒü taraf - Se√ßili s√ºtunlar
        right_section = tk.Frame(main_container, bg=ModernUI.COLORS['card_bg'])
        right_section.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(8, 0))

        tk.Label(right_section, text="Se√ßili S√ºtunlar (Sƒ±ralƒ±):", 
                font=ModernUI.FONTS['body'], fg=ModernUI.COLORS['text'], 
                bg=ModernUI.COLORS['card_bg']).pack(anchor='w')

        self.selected_listbox = tk.Listbox(right_section, height=5, font=ModernUI.FONTS['small'],
                                          relief='solid', bd=1)
        self.selected_listbox.pack(fill=tk.BOTH, expand=True, pady=(2, 0))

    def get_selected_columns(self):
        """Se√ßili s√ºtunlarƒ± d√∂nd√ºr"""
        if self.naming_type.get() == "single":
            selected_col = self.column_var.get()
            return [selected_col] if selected_col else []
        else:
            # √áoklu s√ºtun se√ßiminde sƒ±ralƒ± listeyi kullan
            if hasattr(self, 'column_order'):
                return self.column_order
            return []

    def log_message(self, message: str):
        """Durum metnine mesaj ekle"""
        self.status_text.insert(tk.END, f"{message}\n")
        self.status_text.see(tk.END)
        self.root.update_idletasks()

    def update_status(self, message: str, status_type: str = "info"):
        """Durum labelƒ±nƒ± g√ºncelle - Renkli ikonlarla"""
        # Status ikonlarƒ±
        status_icons = {
            "info": "‚ÑπÔ∏è",
            "success": "‚úÖ", 
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "processing": "‚öôÔ∏è",
            "waiting": "‚è≥"
        }
        
        # Status renkleri
        status_colors = {
            "info": ModernUI.COLORS['text'],
            "success": ModernUI.COLORS['success'],
            "warning": ModernUI.COLORS['warning'], 
            "error": ModernUI.COLORS['danger'],
            "processing": ModernUI.COLORS['secondary'],
            "waiting": ModernUI.COLORS['text_light']
        }
        
        icon = status_icons.get(status_type, "‚ÑπÔ∏è")
        color = status_colors.get(status_type, ModernUI.COLORS['text'])
        
        self.status_label.config(text=f"{icon} {message}", fg=color)
        
        # Progress status ikonu g√ºncelle
        if hasattr(self, 'progress_status_icon'):
            if status_type == "success":
                self.progress_status_icon.config(text="üü¢")
            elif status_type == "warning":
                self.progress_status_icon.config(text="üü°")
            elif status_type == "error":
                self.progress_status_icon.config(text="üî¥")
            elif status_type == "processing":
                self.progress_status_icon.config(text="üîÑ")
            else:
                self.progress_status_icon.config(text="üü¢")
        
        self.root.update_idletasks()

    def update_progress_with_percentage(self, current, total):
        """ƒ∞lerleme √ßubuƒüunu y√ºzde ile g√ºncelle"""
        if total > 0:
            percentage = (current / total) * 100
            self.progress['value'] = current
            self.progress['maximum'] = total
            
            if hasattr(self, 'progress_percent'):
                # Y√ºzde g√∂sterimi daha belirgin
                self.progress_percent.config(text=f"{percentage:.0f}%")
                
                # Renk deƒüi≈üimi - %100'de ye≈üil
                if percentage >= 100:
                    self.progress_percent.config(fg=ModernUI.COLORS['success'])
                elif percentage >= 50:
                    self.progress_percent.config(fg=ModernUI.COLORS['warning'])
                else:
                    self.progress_percent.config(fg=ModernUI.COLORS['secondary'])
                
            # Durum detayƒ± g√ºncelle
            if hasattr(self, 'status_detail'):
                self.status_detail.config(text=f"ƒ∞≈ülenen: {current}/{total}")
        
        self.root.update_idletasks()

    def select_excel_file(self):
        """Excel dosyasƒ± se√ß"""
        file_path = filedialog.askopenfilename(
            title="Excel Dosyasƒ± Se√ßin",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )

        if file_path:
            self.excel_file_path = Path(file_path)
            self.excel_path_var.set(f"‚úÖ {self.excel_file_path.name}")
            self.load_excel_data()

    def select_photo_directory(self):
        """Fotoƒüraf dizini se√ß"""
        directory = filedialog.askdirectory(title="Fotoƒüraf Dizini Se√ßin")

        if directory:
            self.photo_directory = Path(directory)
            self.photo_dir_var.set(f"‚úÖ {self.photo_directory.name}")
            self.log_message(f"üìÇ Fotoƒüraf dizini se√ßildi: {self.photo_directory.name}")
            
            # PNG dosyalarƒ±nƒ±n varlƒ±ƒüƒ±nƒ± kontrol et
            png_files = list(self.photo_directory.glob("*.png"))
            if png_files:
                self.log_message(f"‚ö†Ô∏è PNG dosyalarƒ± tespit edildi: {len(png_files)} adet")
                self.log_message("üìã NOT: En iyi sonu√ß i√ßin JPG formatƒ±ndaki dosyalarƒ± kullanƒ±n")
                messagebox.showinfo("PNG Dosyalarƒ± Tespit Edildi", 
                                   f"Dizinde {len(png_files)} adet PNG dosyasƒ± bulundu.\n\n"
                                   "‚ö†Ô∏è PNG dosyalarƒ± desteklenmektedir ancak en iyi sonu√ß i√ßin JPG formatƒ±ndaki dosyalarƒ± kullanmanƒ±z √∂nerilir.\n\n"
                                   "Boyutlandƒ±rma ve watermark i≈ülemlerinde JPG formatƒ± daha kararlƒ± sonu√ßlar verir.")
            
            # Boyutlandƒ±rma buton durumunu g√ºncelle
            self.update_crop_resize_button_state()

    def load_excel_data(self):
        """Excel verilerini y√ºkle"""
        try:
            self.update_status("Excel dosyasƒ± okunuyor...")
            self.log_message(f"üìä Excel dosyasƒ± okunuyor: {self.excel_file_path.name}")

            # Excel dosyasƒ±nƒ± oku
            data_list, errors, available_columns = self.excel_reader.read_excel_flexible(self.excel_file_path)

            if data_list:
                self.excel_data = data_list
                self.available_columns = available_columns

                # S√ºtun se√ßeneklerini g√ºncelle
                self.column_combo['values'] = available_columns
                if available_columns:
                    self.column_combo.set(available_columns[0])

                # √áoklu s√ºtun se√ßeneklerini g√ºncelle
                if self.naming_type.get() == "multiple":
                    self.update_column_ordering_interface()

                self.log_message(f"‚úÖ Excel verisi ba≈üarƒ±yla y√ºklendi: {len(data_list)} satƒ±r, {len(available_columns)} s√ºtun")
                self.log_message(f"üìã Kullanƒ±labilir s√ºtunlar: {', '.join(available_columns[:5])}{'...' if len(available_columns) > 5 else ''}")
                self.update_status(f"Excel y√ºklendi: {len(data_list)} kayƒ±t")
                # T√ºm buton durumlarƒ±nƒ± g√ºncelle
                self.update_crop_resize_button_state()
                self.update_all_button_states()
            else:
                self.log_message("‚ùå Excel dosyasƒ±ndan veri okunamadƒ±.")
                self.update_status("Excel y√ºkleme ba≈üarƒ±sƒ±z")

        except Exception as e:
            self.log_message(f"‚ùå Excel dosyasƒ± okuma hatasƒ±: {e}")
            self.update_status("Excel okuma hatasƒ±")

    def add_column_to_selection(self):
        """Se√ßili s√ºtunu ekle"""
        selection = self.available_listbox.curselection()
        if selection:
            column = self.available_listbox.get(selection[0])
            if column not in [self.selected_listbox.get(i) for i in range(self.selected_listbox.size())]:
                self.selected_listbox.insert(tk.END, column)
                self.update_column_order()

    def remove_column_from_selection(self):
        """Se√ßili s√ºtunu √ßƒ±kar"""
        selection = self.selected_listbox.curselection()
        if selection:
            self.selected_listbox.delete(selection[0])
            self.update_column_order()

    def move_column_up(self):
        """S√ºtunu yukarƒ± ta≈üƒ±"""
        selection = self.selected_listbox.curselection()
        if selection and selection[0] > 0:
            index = selection[0]
            column = self.selected_listbox.get(index)
            self.selected_listbox.delete(index)
            self.selected_listbox.insert(index - 1, column)
            self.selected_listbox.selection_set(index - 1)
            self.update_column_order()

    def move_column_down(self):
        """S√ºtunu a≈üaƒüƒ± ta≈üƒ±"""
        selection = self.selected_listbox.curselection()
        if selection and selection[0] < self.selected_listbox.size() - 1:
            index = selection[0]
            column = self.selected_listbox.get(index)
            self.selected_listbox.delete(index)
            self.selected_listbox.insert(index + 1, column)
            self.selected_listbox.selection_set(index + 1)
            self.update_column_order()

    def update_column_order(self):
        """S√ºtun sƒ±rasƒ±nƒ± g√ºncelle"""
        self.column_order = [self.selected_listbox.get(i) for i in range(self.selected_listbox.size())]
        # Boyutlandƒ±rma buton durumunu g√ºncelle
        self.update_crop_resize_button_state()

    def toggle_sizing_options(self):
        """Boyutlandƒ±rma se√ßeneklerini g√∂ster/gizle"""
        if self.sizing_enabled.get():
            self.sizing_options_frame.pack(fill=tk.X, padx=8, pady=5)
        else:
            self.sizing_options_frame.pack_forget()
        # Boyutlandƒ±rma buton durumunu g√ºncelle
        self.update_crop_resize_button_state()

    def toggle_watermark_options(self):
        """Watermark se√ßeneklerini g√∂ster/gizle"""
        if self.watermark_enabled.get():
            self.watermark_options_frame.pack(fill=tk.X, padx=8, pady=5)
            self.update_watermark_type()
        else:
            self.watermark_options_frame.pack_forget()

    def update_watermark_type(self):
        """Watermark tipine g√∂re aray√ºz√º g√ºncelle - sadece metin desteklenir"""
        # Watermark sadece metin olacak, logo se√ßeneƒüini kaldƒ±r
        self.text_frame.pack(fill=tk.X, pady=(0, 5))
        self.logo_frame.pack_forget()
        # Okul adƒ± varsa metin olarak ayarla
        if hasattr(self, 'school_name') and self.school_name:
            self.watermark_text_var.set(self.school_name)

    def select_school_logo(self):
        """Okul logosu se√ß (kimlik kartlarƒ± ve PDF'ler i√ßin) - PNG desteƒüi ile"""
        file_path = filedialog.askopenfilename(
            title="Okul Logosu Se√ßin",
            filetypes=[
                ("PNG files", "*.png"),
                ("JPEG files", "*.jpg *.jpeg"),
                ("All image files", "*.png *.jpg *.jpeg *.gif *.bmp"),
                ("All files", "*.*")
            ]
        )

        if file_path:
            self.logo_path_var.set(str(Path(file_path).name))
            self.school_logo_path = Path(file_path)
            self.log_message(f"üñºÔ∏è Okul logosu se√ßildi: {Path(file_path).name}")

    def check_counts(self):
        """Fotoƒüraf ve Excel veri sayƒ±larƒ±nƒ± kontrol et"""
        if not self.school_name:
            messagebox.showerror("Hata", "√ñnce okul adƒ±nƒ± girin.")
            return

        if not self.excel_data:
            messagebox.showerror("Hata", "√ñnce Excel dosyasƒ± se√ßin ve y√ºkleyin.")
            return

        if not self.photo_directory:
            messagebox.showerror("Hata", "√ñnce fotoƒüraf dizini se√ßin.")
            return

        selected_columns = self.get_selected_columns()
        if not selected_columns:
            messagebox.showerror("Hata", "Adlandƒ±rma i√ßin en az bir s√ºtun se√ßin.")
            return

        try:
            self.update_status("Dosyalar kontrol ediliyor...")

            # Fotoƒüraf dosyalarƒ±nƒ± al
            photos = self.photo_processor.get_image_files(self.photo_directory)
            photo_count = len(photos)
            data_count = len(self.excel_data)

            self.log_message(f"\nüìä === SAYIM KONTROL√ú ===")
            self.log_message(f"üìÑ Excel verisi satƒ±r sayƒ±sƒ±: {data_count}")
            self.log_message(f"üñºÔ∏è Fotoƒüraf dosyasƒ± sayƒ±sƒ±: {photo_count}")

            # Detaylƒ± bilgi ver
            if data_count > photo_count:
                self.log_message(f"‚ö†Ô∏è Excel'de {data_count - photo_count} adet fazla kayƒ±t var")
            elif photo_count > data_count:
                self.log_message(f"‚ö†Ô∏è Fotoƒüraf klas√∂r√ºnde {photo_count - data_count} adet fazla dosya var")
            else:
                self.log_message(f"‚úÖ Excel verisi ve fotoƒüraf sayƒ±sƒ± e≈üit")

            # E≈üle≈ütirme √∂nerisi
            self.log_message(f"üìã Adlandƒ±rma i√ßin se√ßilen s√ºtunlar: {selected_columns}")

            # Sonucu g√∂ster
            result_text = f"Excel: {data_count} kayƒ±t | Fotoƒüraf: {photo_count} dosya"
            messagebox.showinfo("Sayƒ±m Kontrol√º", result_text)
            self.log_message(f"üìã Se√ßilen s√ºtunlar: {', '.join(selected_columns)}")

            # Kontrol√ºn ba≈üarƒ±lƒ± olup olmadƒ±ƒüƒ±nƒ± belirle
            success_count = min(data_count, photo_count)
            
            if success_count > 0:
                self.log_message("‚úÖ BA≈ûARILI: Fotoƒüraf ve veri kontrol edildi!")
                self.log_message("üöÄ Fotoƒüraflarƒ± adlandƒ±rma i≈ülemi i√ßin hazƒ±r.")

                # Butonlarƒ± aktif et - sadece Excel verisi varsa
                if self.excel_data:
                    self.rename_button.config(state="normal")
                    self.pdf_button.config(state="normal")
                    self.id_card_button.config(state="normal")
                self.update_status("Hazƒ±r - ƒ∞≈ülem ba≈ülatƒ±labilir")

                # ƒ∞lk 5 fotoƒürafƒ± listele
                self.log_message(f"\nüìã Bulunan fotoƒüraflar (ilk 5):")
                for i, photo in enumerate(photos[:5], 1):
                    self.log_message(f"   {i}. {photo.name}")
                if photo_count > 5:
                    self.log_message(f"   ... ve {photo_count - 5} tane daha.")
                    
                # E≈üle≈ümeyen sayƒ±lar i√ßin uyarƒ± ver ama devam et
                if data_count != photo_count:
                    if photo_count > data_count:
                        self.log_message(f"‚ö†Ô∏è Fazla fotoƒüraf var: {photo_count - data_count} adet")
                    else:
                        self.log_message(f"‚ö†Ô∏è Yetersiz fotoƒüraf var: {data_count - photo_count} adet eksik")

            else:
                self.log_message("‚ùå HATA: Hi√ß fotoƒüraf veya veri bulunamadƒ±!")
                self.rename_button.config(state="disabled")
                self.pdf_button.config(state="disabled")
                self.id_card_button.config(state="disabled")
                self.update_status("Hata - Veri bulunamadƒ±")

            # Boyutlandƒ±rma butonunu her durumda kontrol et
            self.update_crop_resize_button_state()

        except Exception as e:
            self.log_message(f"‚ùå Kontrol hatasƒ±: {e}")
            self.update_status("Kontrol hatasƒ±")

    def disable_all_buttons(self):
        """T√ºm i≈ülem butonlarƒ±nƒ± devre dƒ±≈üƒ± bƒ±rak"""
        self.rename_button.config(state="disabled")
        self.crop_resize_button.config(state="disabled")
        self.pdf_button.config(state="disabled")
        self.id_card_button.config(state="disabled")

    def enable_all_buttons(self):
        """T√ºm i≈ülem butonlarƒ±nƒ± aktif et"""
        self.rename_button.config(state="normal")
        self.crop_resize_button.config(state="normal")
        self.pdf_button.config(state="normal")
        self.id_card_button.config(state="normal")

    def show_cancel_button(self):
        """ƒ∞ptal butonunu g√∂ster"""
        self.cancel_container.pack(fill=tk.X, pady=(8, 0))

    def hide_cancel_button(self):
        """ƒ∞ptal butonunu gizle"""
        self.cancel_container.pack_forget()

    def cancel_operation(self):
        """Devam eden i≈ülemi iptal et"""
        self.cancel_requested.set()
        self.log_message("‚èπÔ∏è ƒ∞≈ülem iptali istendi, l√ºtfen bekleyin...")
        self.update_status("ƒ∞ptal ediliyor...")

    def start_rename_photos(self):
        """Fotoƒüraf adlandƒ±rma i≈ülemini thread'de ba≈ülat"""
        self.cancel_requested.clear()
        self.disable_all_buttons()
        self.show_cancel_button()

        self.current_operation = threading.Thread(target=self.rename_photos, daemon=True)
        self.current_operation.start()

    def start_crop_and_resize_photos(self):
        """Fotoƒüraf kƒ±rpma i≈ülemini thread'de ba≈ülat"""
        self.cancel_requested.clear()
        self.disable_all_buttons()
        self.show_cancel_button()

        self.current_operation = threading.Thread(target=self.crop_and_resize_photos, daemon=True)
        self.current_operation.start()

    def start_generate_class_pdfs(self):
        """PDF olu≈üturma i≈ülemini thread'de ba≈ülat"""
        self.cancel_requested.clear()
        self.disable_all_buttons()
        self.show_cancel_button()

        self.current_operation = threading.Thread(target=self.generate_class_pdfs, daemon=True)
        self.current_operation.start()

    def start_generate_id_cards(self):
        """Kimlik kartƒ± olu≈üturma i≈ülemini thread'de ba≈ülat"""
        # √ñnce s√ºtun se√ßimi yap
        if not self.excel_data:
            messagebox.showerror("Hata", "√ñnce Excel dosyasƒ± y√ºkleyin.")
            return
            
        selected_columns = self.show_id_card_column_selection()
        if not selected_columns:
            return  # Kullanƒ±cƒ± iptal etti
            
        self.id_card_selected_columns = selected_columns
        
        self.cancel_requested.clear()
        self.disable_all_buttons()
        self.show_cancel_button()

        self.current_operation = threading.Thread(target=self.generate_id_cards, daemon=True)
        self.current_operation.start()

    def show_id_card_column_selection(self):
        """Kimlik kartƒ± i√ßin geli≈ümi≈ü s√ºtun se√ßim penceresi g√∂ster"""
        if not self.available_columns:
            messagebox.showerror("Hata", "Excel s√ºtunlarƒ± bulunamadƒ±.")
            return None
        
        # √ñnce kapsam se√ßimi yap
        scope_result = self.show_id_card_scope_selection()
        if not scope_result:
            return None
        
        scope_type, selected_items = scope_result
        
        # Yeni pencere olu≈ütur - boyutu artƒ±rƒ±ldƒ±
        dialog = tk.Toplevel(self.root)
        dialog.title("Kimlik Kartƒ± Olu≈üturma - Detaylƒ± Ayarlar")
        dialog.geometry("1200x950")
        dialog.configure(bg=ModernUI.COLORS['bg_main'])
        dialog.grab_set()  # Modal yap
        
        # Pencereyi merkeze al
        dialog.transient(self.root)
        
        # Ana frame - scroll i√ßin
        main_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Scroll canvas ve scrollbar
        canvas = tk.Canvas(main_frame, bg=ModernUI.COLORS['bg_main'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=ModernUI.COLORS['bg_main'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Deƒüi≈ükenler
        selected_columns = []
        selected_logo_path = None
        selected_logo2_path = None
        
        # Ba≈ülƒ±k
        title_label = tk.Label(scrollable_frame, 
                              text="üÜî Kimlik Kartƒ± Olu≈üturma - Detaylƒ± Ayarlar",
                              font=('Segoe UI', 16, 'bold'),
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['bg_main'])
        title_label.pack(pady=(10, 5))
        
        # A√ßƒ±klama
        desc_label = tk.Label(scrollable_frame,
                             text="Kimlik kartlarƒ±nƒ±zƒ± √∂zelle≈ütirin: S√ºtunlar, logolar, renkler, QR kod ve daha fazlasƒ±",
                             font=ModernUI.FONTS['body'],
                             fg=ModernUI.COLORS['text_light'],
                             bg=ModernUI.COLORS['bg_main'])
        desc_label.pack(pady=(0, 10))
        
        # Ana container - 2 s√ºtunlu layout
        main_container = tk.Frame(scrollable_frame, bg=ModernUI.COLORS['bg_main'])
        main_container.pack(fill=tk.BOTH, expand=True, padx=20)
        
        # Sol s√ºtun
        left_column = tk.Frame(main_container, bg=ModernUI.COLORS['bg_main'])
        left_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # Saƒü s√ºtun
        right_column = tk.Frame(main_container, bg=ModernUI.COLORS['bg_main'])
        right_column.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(10, 0))
        
        # 1. S√úTUN SE√áƒ∞Mƒ∞ (Sol s√ºtun) - y√ºkseklik azaltƒ±ldƒ±
        column_frame = tk.LabelFrame(left_column, text="üìä S√ºtun Se√ßimi", 
                                    font=ModernUI.FONTS['subtitle'], 
                                    bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        column_frame.pack(fill=tk.X, pady=(0, 10))
        
        # S√ºtun se√ßim alt container
        column_container = tk.Frame(column_frame, bg=ModernUI.COLORS['card_bg'])
        column_container.pack(fill=tk.X, padx=10, pady=10)
        
        # Sol taraf - Mevcut s√ºtunlar
        avail_frame = tk.Frame(column_container, bg=ModernUI.COLORS['card_bg'])
        avail_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(avail_frame, text="Mevcut S√ºtunlar:", 
                font=ModernUI.FONTS['body'], fg=ModernUI.COLORS['text'], 
                bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        available_listbox = tk.Listbox(avail_frame, font=ModernUI.FONTS['small'],
                                      relief='solid', bd=1, height=6)
        for column in self.available_columns:
            available_listbox.insert(tk.END, column)
        available_listbox.pack(fill=tk.X, pady=(5, 0))
        
        # Orta - Butonlar
        button_frame = tk.Frame(column_container, bg=ModernUI.COLORS['card_bg'])
        button_frame.pack(side=tk.LEFT, padx=10, fill=tk.Y)
        
        tk.Label(button_frame, text="", bg=ModernUI.COLORS['card_bg']).pack(pady=20)
        
        def add_column():
            selection = available_listbox.curselection()
            if selection:
                column = available_listbox.get(selection[0])
                if column not in [selected_listbox.get(i) for i in range(selected_listbox.size())]:
                    selected_listbox.insert(tk.END, column)
        
        def remove_column():
            selection = selected_listbox.curselection()
            if selection:
                selected_listbox.delete(selection[0])
        
        def move_up():
            selection = selected_listbox.curselection()
            if selection and selection[0] > 0:
                index = selection[0]
                column = selected_listbox.get(index)
                selected_listbox.delete(index)
                selected_listbox.insert(index - 1, column)
                selected_listbox.selection_set(index - 1)
        
        def move_down():
            selection = selected_listbox.curselection()
            if selection and selection[0] < selected_listbox.size() - 1:
                index = selection[0]
                column = selected_listbox.get(index)
                selected_listbox.delete(index)
                selected_listbox.insert(index + 1, column)
                selected_listbox.selection_set(index + 1)
        
        ttk.Button(button_frame, text="‚Üí", command=add_column, width=5).pack(pady=2)
        ttk.Button(button_frame, text="‚Üê", command=remove_column, width=5).pack(pady=2)
        tk.Frame(button_frame, height=10, bg=ModernUI.COLORS['card_bg']).pack()
        ttk.Button(button_frame, text="‚Üë", command=move_up, width=5).pack(pady=2)
        ttk.Button(button_frame, text="‚Üì", command=move_down, width=5).pack(pady=2)
        
        # Saƒü taraf - Se√ßili s√ºtunlar
        selected_frame = tk.Frame(column_container, bg=ModernUI.COLORS['card_bg'])
        selected_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        tk.Label(selected_frame, text="Se√ßili S√ºtunlar:", 
                font=ModernUI.FONTS['body'], fg=ModernUI.COLORS['text'], 
                bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        selected_listbox = tk.Listbox(selected_frame, font=ModernUI.FONTS['small'],
                                     relief='solid', bd=1, height=6)
        selected_listbox.pack(fill=tk.X, pady=(5, 0))
        
        # 2. LOGO SE√áƒ∞MLERƒ∞ (Sol s√ºtun)
        logo_frame = tk.LabelFrame(left_column, text="üñºÔ∏è Logo Ayarlarƒ±", 
                                  font=ModernUI.FONTS['subtitle'], 
                                  bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        logo_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Ana logo
        logo1_container = tk.Frame(logo_frame, bg=ModernUI.COLORS['card_bg'])
        logo1_container.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(logo1_container, text="üìã Ana Logo (Header):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        logo1_select_frame = tk.Frame(logo1_container, bg=ModernUI.COLORS['card_bg'])
        logo1_select_frame.pack(fill=tk.X, pady=(5, 0))
        
        logo_path_var = tk.StringVar()
        logo_entry = tk.Entry(logo1_select_frame, textvariable=logo_path_var, 
                             font=ModernUI.FONTS['small'], state="readonly")
        logo_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        def select_logo():
            nonlocal selected_logo_path
            file_path = filedialog.askopenfilename(
                title="Ana Logo Se√ßin",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("JPEG files", "*.jpg *.jpeg"),
                    ("All image files", "*.png *.jpg *.jpeg *.gif *.bmp"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                selected_logo_path = file_path
                logo_path_var.set(Path(file_path).name)
        
        ttk.Button(logo1_select_frame, text="Logo Se√ß", 
                  command=select_logo, style='Primary.TButton').pack(side=tk.RIGHT)
        
        # ƒ∞kinci logo
        logo2_container = tk.Frame(logo_frame, bg=ModernUI.COLORS['card_bg'])
        logo2_container.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(logo2_container, text="üè¢ ƒ∞kinci Logo (Header Saƒü):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        logo2_select_frame = tk.Frame(logo2_container, bg=ModernUI.COLORS['card_bg'])
        logo2_select_frame.pack(fill=tk.X, pady=(5, 10))
        
        logo2_path_var = tk.StringVar()
        logo2_entry = tk.Entry(logo2_select_frame, textvariable=logo2_path_var, 
                              font=ModernUI.FONTS['small'], state="readonly")
        logo2_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        def select_logo2():
            nonlocal selected_logo2_path
            file_path = filedialog.askopenfilename(
                title="ƒ∞kinci Logo Se√ßin",
                filetypes=[
                    ("PNG files", "*.png"),
                    ("JPEG files", "*.jpg *.jpeg"),
                    ("All image files", "*.png *.jpg *.jpeg *.gif *.bmp"),
                    ("All files", "*.*")
                ]
            )
            if file_path:
                selected_logo2_path = file_path
                logo2_path_var.set(Path(file_path).name)
        
        ttk.Button(logo2_select_frame, text="Logo Se√ß", 
                  command=select_logo2, style='Primary.TButton').pack(side=tk.RIGHT)
        
        # 3. RENK AYARLARI (Sol s√ºtun - alt tarafta)
        color_frame = tk.LabelFrame(left_column, text="üé® Renk Ayarlarƒ±", 
                                   font=ModernUI.FONTS['subtitle'], 
                                   bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        color_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Renk se√ßici fonksiyonu
        def choose_color(color_var, button_widget):
            from tkinter import colorchooser
            color = colorchooser.askcolor(title="Renk Se√ßin")[1]
            if color:
                color_var.set(color)
                button_widget.configure(bg=color)
        
        # Header renk ayarlarƒ±
        header_color_container = tk.Frame(color_frame, bg=ModernUI.COLORS['card_bg'])
        header_color_container.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(header_color_container, text="üìã √úst Ba≈ülƒ±k Renkleri:", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        header_row = tk.Frame(header_color_container, bg=ModernUI.COLORS['card_bg'])
        header_row.pack(fill=tk.X, pady=(5, 0))
        
        header_color_var = tk.StringVar(value="#2D55A5")
        header_color_button = tk.Button(header_row, text="Renk 1", width=8, bg="#2D55A5", fg="white",
                                       command=lambda: choose_color(header_color_var, header_color_button))
        header_color_button.pack(side=tk.LEFT, padx=(0, 5))
        
        header_color_entry = tk.Entry(header_row, textvariable=header_color_var, width=10)
        header_color_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        header_gradient_var = tk.BooleanVar()
        header_gradient_cb = tk.Checkbutton(header_row, text="Gradient", 
                                           variable=header_gradient_var, 
                                           bg=ModernUI.COLORS['card_bg'])
        header_gradient_cb.pack(side=tk.LEFT, padx=(0, 10))
        
        header_color2_var = tk.StringVar(value="#1B3F73")
        header_color2_button = tk.Button(header_row, text="Renk 2", width=8, bg="#1B3F73", fg="white",
                                        command=lambda: choose_color(header_color2_var, header_color2_button))
        header_color2_button.pack(side=tk.LEFT, padx=(0, 5))
        
        header_color2_entry = tk.Entry(header_row, textvariable=header_color2_var, width=10)
        header_color2_entry.pack(side=tk.LEFT)
        
        # Footer renk ayarlarƒ±
        footer_color_container = tk.Frame(color_frame, bg=ModernUI.COLORS['card_bg'])
        footer_color_container.pack(fill=tk.X, padx=10, pady=(5, 10))
        
        tk.Label(footer_color_container, text="üìä Alt Bilgi Renkleri:", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        footer_row = tk.Frame(footer_color_container, bg=ModernUI.COLORS['card_bg'])
        footer_row.pack(fill=tk.X, pady=(5, 0))
        
        footer_color_var = tk.StringVar(value="#2D55A5")
        footer_color_button = tk.Button(footer_row, text="Renk 1", width=8, bg="#2D55A5", fg="white",
                                       command=lambda: choose_color(footer_color_var, footer_color_button))
        footer_color_button.pack(side=tk.LEFT, padx=(0, 5))
        
        footer_color_entry = tk.Entry(footer_row, textvariable=footer_color_var, width=10)
        footer_color_entry.pack(side=tk.LEFT, padx=(0, 10))
        
        footer_gradient_var = tk.BooleanVar()
        footer_gradient_cb = tk.Checkbutton(footer_row, text="Gradient", 
                                           variable=footer_gradient_var, 
                                           bg=ModernUI.COLORS['card_bg'])
        footer_gradient_cb.pack(side=tk.LEFT, padx=(0, 10))
        
        footer_color2_var = tk.StringVar(value="#1B3F73")
        footer_color2_button = tk.Button(footer_row, text="Renk 2", width=8, bg="#1B3F73", fg="white",
                                        command=lambda: choose_color(footer_color2_var, footer_color2_button))
        footer_color2_button.pack(side=tk.LEFT, padx=(0, 5))
        
        footer_color2_entry = tk.Entry(footer_row, textvariable=footer_color2_var, width=10)
        footer_color2_entry.pack(side=tk.LEFT)
        
        # 4. QR KOD AYARLARI (Saƒü s√ºtun - √ºst tarafta)
        qr_frame = tk.LabelFrame(right_column, text="üì± QR Kod Ayarlarƒ±", 
                                font=ModernUI.FONTS['subtitle'], 
                                bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        qr_frame.pack(fill=tk.X, pady=(0, 10))
        
        qr_enable_var = tk.BooleanVar(value=True)  # Varsayƒ±lan olarak se√ßili
        qr_enable_cb = tk.Checkbutton(qr_frame, text="QR Kod Ekle", 
                                     variable=qr_enable_var, font=ModernUI.FONTS['body'],
                                     bg=ModernUI.COLORS['card_bg'])
        qr_enable_cb.pack(anchor='w', padx=10, pady=(5, 0))
        
        # QR kod se√ßenekleri
        qr_options_frame = tk.Frame(qr_frame, bg=ModernUI.COLORS['card_bg'])
        qr_options_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(qr_options_frame, text="QR Kod Verisi:", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w')
        
        qr_data_var = tk.StringVar(value="student")  # Varsayƒ±lan olarak "√ñƒürenci Bilgileri" se√ßili
        
        qr_custom_rb = tk.Radiobutton(qr_options_frame, text="√ñzel Metin", variable=qr_data_var, 
                                     value="custom", bg=ModernUI.COLORS['card_bg'])
        qr_custom_rb.pack(anchor='w', pady=2)
        
        qr_custom_text_var = tk.StringVar(value="VesiKolay Pro")
        qr_custom_entry = tk.Entry(qr_options_frame, textvariable=qr_custom_text_var, 
                                  font=ModernUI.FONTS['small'])
        qr_custom_entry.pack(fill=tk.X, padx=(20, 0), pady=(0, 5))
        
        qr_student_rb = tk.Radiobutton(qr_options_frame, text="√ñƒürenci Bilgileri", variable=qr_data_var, 
                                      value="student", bg=ModernUI.COLORS['card_bg'])
        qr_student_rb.pack(anchor='w', pady=2)
        
        # QR kod pozisyon
        tk.Label(qr_options_frame, text="QR Kod Pozisyonu:", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', pady=(10, 0))
        
        qr_position_var = tk.StringVar(value="bottom_right")
        
        position_frame = tk.Frame(qr_options_frame, bg=ModernUI.COLORS['card_bg'])
        position_frame.pack(fill=tk.X)
        
        tk.Radiobutton(position_frame, text="Saƒü Alt", variable=qr_position_var, 
                      value="bottom_right", bg=ModernUI.COLORS['card_bg']).pack(side=tk.LEFT)
        tk.Radiobutton(position_frame, text="Sol Alt", variable=qr_position_var, 
                      value="bottom_left", bg=ModernUI.COLORS['card_bg']).pack(side=tk.LEFT)
        
        # 5. BA≈ûLIK AYARLARI (Saƒü s√ºtun)
        header_frame = tk.LabelFrame(right_column, text="üìù Ba≈ülƒ±k Ayarlarƒ±", 
                                    font=ModernUI.FONTS['subtitle'], 
                                    bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        tk.Label(header_frame, text="1. Satƒ±r (√ñrnek: T.C.):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', padx=10, pady=(5, 0))
        
        header_line1_var = tk.StringVar(value="T.C.")
        header_line1_entry = tk.Entry(header_frame, textvariable=header_line1_var, 
                                     font=ModernUI.FONTS['body'])
        header_line1_entry.pack(fill=tk.X, padx=10, pady=(5, 0))
        
        tk.Label(header_frame, text="2. Satƒ±r (Kaymakamlƒ±k/M√ºd√ºrl√ºk):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', padx=10, pady=(5, 0))
        
        header_line2_var = tk.StringVar(value="...... KAYMAKAMLIGI")
        header_line2_entry = tk.Entry(header_frame, textvariable=header_line2_var, 
                                     font=ModernUI.FONTS['body'])
        header_line2_entry.pack(fill=tk.X, padx=10, pady=(5, 0))
        
        tk.Label(header_frame, text="3. Satƒ±r (Okul Adƒ±):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', padx=10, pady=(5, 0))
        
        header_line3_var = tk.StringVar(value=self.school_name if hasattr(self, 'school_name') else "KONYA Lƒ∞SESƒ∞")
        header_line3_entry = tk.Entry(header_frame, textvariable=header_line3_var, 
                                     font=ModernUI.FONTS['body'])
        header_line3_entry.pack(fill=tk.X, padx=10, pady=(5, 0))
        
        tk.Label(header_frame, text="4. Satƒ±r (Kart Ba≈ülƒ±ƒüƒ± - Renkli alan dƒ±≈üƒ±):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', padx=10, pady=(5, 0))
        
        header_line4_var = tk.StringVar(value="√ñƒürenci Kimlik Kartƒ±")
        header_line4_entry = tk.Entry(header_frame, textvariable=header_line4_var, 
                                     font=ModernUI.FONTS['body'])
        header_line4_entry.pack(fill=tk.X, padx=10, pady=(5, 0))
        
        tk.Label(header_frame, text="5. Satƒ±r (Eƒüitim-√ñƒüretim Yƒ±lƒ± - Footer):", 
                font=ModernUI.FONTS['body'], bg=ModernUI.COLORS['card_bg']).pack(anchor='w', padx=10, pady=(5, 0))
        
        header_line5_var = tk.StringVar(value="2025-2026 Eƒûƒ∞Tƒ∞M-√ñƒûRETƒ∞M YILI")
        header_line5_entry = tk.Entry(header_frame, textvariable=header_line5_var, 
                                     font=ModernUI.FONTS['body'])
        header_line5_entry.pack(fill=tk.X, padx=10, pady=(5, 10))
        
        # Alt butonlar - scrollable_frame i√ßinde
        bottom_frame = tk.Frame(scrollable_frame, bg=ModernUI.COLORS['bg_main'])
        bottom_frame.pack(fill=tk.X, padx=20, pady=20)
        
        # √ñnizleme butonu
        def show_preview():
            messagebox.showinfo("√ñnizleme", 
                               f"üìã Se√ßilen S√ºtunlar: {len([selected_listbox.get(i) for i in range(selected_listbox.size())])}\n"
                               f"üñºÔ∏è Ana Logo: {'‚úÖ' if selected_logo_path else '‚ùå'}\n"
                               f"üè¢ ƒ∞kinci Logo: {'‚úÖ' if selected_logo2_path else '‚ùå'}\n"
                               f"üé® Header Gradient: {'‚úÖ' if header_gradient_var.get() else '‚ùå'}\n"
                               f"üì± QR Kod: {'‚úÖ' if qr_enable_var.get() else '‚ùå'}\n"
                               f"üìù Ba≈ülƒ±k Satƒ±rlarƒ±:\n"
                               f"   1. {header_line1_var.get()[:30]}\n"
                               f"   2. {header_line2_var.get()[:30]}\n"
                               f"   3. {header_line3_var.get()[:30]}")
        
        preview_button = ttk.Button(bottom_frame, text="üîç √ñnizleme", 
                                   command=show_preview, style='Primary.TButton')
        preview_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # Bo≈üluk
        tk.Frame(bottom_frame, bg=ModernUI.COLORS['bg_main']).pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        # ƒ∞ptal butonu
        cancel_button = ttk.Button(bottom_frame, text="‚ùå ƒ∞ptal", 
                                  style='Warning.TButton')
        cancel_button.pack(side=tk.RIGHT, padx=(5, 0))
        
        # Olu≈ütur butonu
        create_button = ttk.Button(bottom_frame, text="üÜî Kimlik Kartlarƒ±nƒ± Olu≈ütur", 
                                  style='Success.TButton')
        create_button.pack(side=tk.RIGHT, padx=(10, 5))
        
        # Canvas ve scrollbar'ƒ± pack et
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Mouse wheel scroll desteƒüi - g√ºvenli versiyon
        def _on_mousewheel(event):
            try:
                # Canvas'ƒ±n hala mevcut olup olmadƒ±ƒüƒ±nƒ± kontrol et
                if canvas.winfo_exists():
                    canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            except tk.TclError:
                # Canvas silinmi≈üse event binding'i kaldƒ±r
                canvas.unbind_all("<MouseWheel>")
            except Exception:
                # Diƒüer hatalar i√ßin de binding'i kaldƒ±r
                canvas.unbind_all("<MouseWheel>")
        
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # Dialog kapatƒ±lƒ±rken event binding'leri temizle
        def cleanup_events():
            try:
                canvas.unbind_all("<MouseWheel>")
            except:
                pass
        
        dialog.protocol("WM_DELETE_WINDOW", lambda: (cleanup_events(), dialog.destroy()))
        
        def on_create():
            nonlocal selected_columns
            selected_columns = [selected_listbox.get(i) for i in range(selected_listbox.size())]
            if not selected_columns:
                messagebox.showwarning("Uyarƒ±", "En az bir s√ºtun se√ßmelisiniz.")
                return
                
            # T√ºm ayarlarƒ± kaydet
            self.id_card_settings = {
                'header_color': header_color_var.get(),
                'header_gradient': header_gradient_var.get(),
                'header_gradient_color2': header_color2_var.get(),
                'footer_color': footer_color_var.get(),
                'footer_gradient': footer_gradient_var.get(),
                'footer_gradient_color2': footer_color2_var.get(),
                'qr_enabled': qr_enable_var.get(),
                'qr_data_type': qr_data_var.get(),
                'qr_custom_text': qr_custom_text_var.get(),
                'qr_position': qr_position_var.get(),
                'header_line1': header_line1_var.get(),
                'header_line2': header_line2_var.get(),
                'header_line3': header_line3_var.get(),
                'header_line4': header_line4_var.get(),
                'header_line5': header_line5_var.get(),
                'main_logo_path': selected_logo_path,
                'second_logo_path': selected_logo2_path
            }
            
            dialog.destroy()
        
        def on_cancel():
            nonlocal selected_columns, selected_logo_path, selected_logo2_path
            selected_columns = []
            selected_logo_path = None
            selected_logo2_path = None
            dialog.destroy()
        
        # Buton komutlarƒ±nƒ± baƒüla
        cancel_button.configure(command=on_cancel)
        create_button.configure(command=on_create)
        
        
        
        # Pencereyi bekle
        dialog.wait_window()
        
        # Sonu√ßlarƒ± d√∂nd√ºr
        if selected_columns:
            if selected_logo_path:
                self.id_card_logo_path = selected_logo_path
            if selected_logo2_path:
                self.id_card_logo2_path = selected_logo2_path
            
            # Kapsam bilgisini de kaydet
            self.id_card_scope_type = scope_type
            self.id_card_selected_items = selected_items
            
            return selected_columns
        return None

    def show_id_card_scope_selection(self):
        """Kimlik kartƒ± kapsamƒ± se√ßim penceresi"""
        # Kapsam se√ßim penceresi
        scope_dialog = tk.Toplevel(self.root)
        scope_dialog.title("Kimlik Kartƒ± Olu≈üturma Kapsamƒ±")
        scope_dialog.geometry("800x650")
        scope_dialog.configure(bg=ModernUI.COLORS['bg_main'])
        scope_dialog.grab_set()
        scope_dialog.transient(self.root)
        
        result = None
        
        # Ba≈ülƒ±k
        title_label = tk.Label(scope_dialog, 
                              text="üÜî Kimlik Kartƒ± Olu≈üturma Kapsamƒ±",
                              font=('Segoe UI', 16, 'bold'),
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['bg_main'])
        title_label.pack(pady=(20, 10))
        
        # A√ßƒ±klama
        desc_label = tk.Label(scope_dialog,
                             text="Kimlik kartlarƒ±nƒ± hangi kapsamda olu≈üturmak istiyorsunuz?",
                             font=ModernUI.FONTS['body'],
                             fg=ModernUI.COLORS['text_light'],
                             bg=ModernUI.COLORS['bg_main'])
        desc_label.pack(pady=(0, 20))
        
        # Se√ßenekler frame
        options_frame = tk.Frame(scope_dialog, bg=ModernUI.COLORS['bg_main'])
        options_frame.pack(fill=tk.BOTH, expand=True, padx=40, pady=20)
        
        scope_var = tk.StringVar(value="all")
        
        # T√ºm √∂ƒürenciler se√ßeneƒüi
        all_frame = tk.LabelFrame(options_frame, text="üìã T√ºm √ñƒürenciler", 
                                 font=ModernUI.FONTS['subtitle'], 
                                 bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        all_frame.pack(fill=tk.X, pady=(0, 15))
        
        all_radio = tk.Radiobutton(all_frame, text="T√ºm √∂ƒürenci listesi i√ßin kimlik kartƒ± olu≈ütur",
                                  variable=scope_var, value="all",
                                  bg=ModernUI.COLORS['card_bg'], font=ModernUI.FONTS['body'])
        all_radio.pack(anchor='w', padx=15, pady=10)
        
        all_info = tk.Label(all_frame, text=f"üìä Toplam: {len(self.excel_data)} √∂ƒürenci",
                           font=ModernUI.FONTS['small'], fg=ModernUI.COLORS['text_light'],
                           bg=ModernUI.COLORS['card_bg'])
        all_info.pack(anchor='w', padx=30, pady=(0, 10))
        
        # Sƒ±nƒ±f bazlƒ± se√ßenek
        class_frame = tk.LabelFrame(options_frame, text="üè´ Sƒ±nƒ±f Bazƒ±nda", 
                                   font=ModernUI.FONTS['subtitle'], 
                                   bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        class_frame.pack(fill=tk.X, pady=(0, 15))
        
        class_radio = tk.Radiobutton(class_frame, text="Belirli sƒ±nƒ±flar i√ßin kimlik kartƒ± olu≈ütur",
                                    variable=scope_var, value="class",
                                    bg=ModernUI.COLORS['card_bg'], font=ModernUI.FONTS['body'])
        class_radio.pack(anchor='w', padx=15, pady=(10, 5))
        
        # Sƒ±nƒ±f listesi
        class_list_frame = tk.Frame(class_frame, bg=ModernUI.COLORS['card_bg'])
        class_list_frame.pack(fill=tk.X, padx=30, pady=(0, 10))
        
        # Excel'den sƒ±nƒ±flarƒ± √ßƒ±kar
        classes = set()
        for record in self.excel_data:
            class_name = record.get('class_name', record.get('sƒ±nƒ±f', 'Bilinmiyor'))
            if class_name and str(class_name).lower() not in ['nan', 'none', '']:
                classes.add(str(class_name))
        
        classes = sorted(list(classes))
        
        if classes:
            class_info = tk.Label(class_list_frame, 
                                 text=f"üìö Mevcut sƒ±nƒ±flar: {', '.join(classes[:5])}{'...' if len(classes) > 5 else ''}",
                                 font=ModernUI.FONTS['small'], fg=ModernUI.COLORS['text_light'],
                                 bg=ModernUI.COLORS['card_bg'])
            class_info.pack(anchor='w')
        else:
            class_info = tk.Label(class_list_frame, text="‚ö†Ô∏è Sƒ±nƒ±f bilgisi bulunamadƒ±",
                                 font=ModernUI.FONTS['small'], fg=ModernUI.COLORS['warning'],
                                 bg=ModernUI.COLORS['card_bg'])
            class_info.pack(anchor='w')
        
        # Bireysel se√ßenek
        individual_frame = tk.LabelFrame(options_frame, text="üë§ Bireysel Se√ßim", 
                                        font=ModernUI.FONTS['subtitle'], 
                                        bg=ModernUI.COLORS['card_bg'], relief='solid', bd=1)
        individual_frame.pack(fill=tk.X, pady=(0, 20))
        
        individual_radio = tk.Radiobutton(individual_frame, text="Belirli √∂ƒürenciler i√ßin kimlik kartƒ± olu≈ütur",
                                         variable=scope_var, value="individual",
                                         bg=ModernUI.COLORS['card_bg'], font=ModernUI.FONTS['body'])
        individual_radio.pack(anchor='w', padx=15, pady=(10, 5))
        
        individual_info = tk.Label(individual_frame, text="üîç Liste √ºzerinden tek tek √∂ƒürenci se√ßimi yapabilirsiniz",
                                  font=ModernUI.FONTS['small'], fg=ModernUI.COLORS['text_light'],
                                  bg=ModernUI.COLORS['card_bg'])
        individual_info.pack(anchor='w', padx=30, pady=(0, 10))
        
        # Butonlar - yukarƒ± ta≈üƒ±ndƒ±
        button_frame = tk.Frame(scope_dialog, bg=ModernUI.COLORS['bg_main'])
        button_frame.pack(fill=tk.X, padx=40, pady=(10, 20))
        
        def on_continue():
            nonlocal result
            scope_type = scope_var.get()
            
            if scope_type == "all":
                result = ("all", None)
                scope_dialog.destroy()
            elif scope_type == "class":
                if not classes:
                    messagebox.showwarning("Uyarƒ±", "Sƒ±nƒ±f bilgisi bulunamadƒ±.")
                    return
                selected_classes = self.show_class_selection(classes)
                if selected_classes:
                    result = ("class", selected_classes)
                    scope_dialog.destroy()
            elif scope_type == "individual":
                selected_students = self.show_individual_selection()
                if selected_students:
                    result = ("individual", selected_students)
                    scope_dialog.destroy()
        
        def on_cancel():
            nonlocal result
            result = None
            scope_dialog.destroy()
        
        ttk.Button(button_frame, text="‚ùå ƒ∞ptal", command=on_cancel, 
                  style='Warning.TButton').pack(side=tk.RIGHT, padx=(10, 0))
        ttk.Button(button_frame, text="‚û°Ô∏è Devam Et", command=on_continue, 
                  style='Success.TButton').pack(side=tk.RIGHT)
        
        # Pencereyi bekle
        scope_dialog.wait_window()
        
        return result

    def show_class_selection(self, available_classes):
        """Sƒ±nƒ±f se√ßim penceresi"""
        dialog = tk.Toplevel(self.root)
        dialog.title("Sƒ±nƒ±f Se√ßimi")
        dialog.geometry("650x500")
        dialog.configure(bg=ModernUI.COLORS['bg_main'])
        dialog.grab_set()
        dialog.transient(self.root)
        
        selected_classes = []
        
        # Ba≈ülƒ±k
        title_label = tk.Label(dialog, text="üè´ Sƒ±nƒ±f Se√ßimi",
                              font=('Segoe UI', 14, 'bold'),
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['bg_main'])
        title_label.pack(pady=(15, 10))
        
        # A√ßƒ±klama
        desc_label = tk.Label(dialog, text="Kimlik kartƒ± olu≈üturulacak sƒ±nƒ±flarƒ± se√ßin:",
                             font=ModernUI.FONTS['body'],
                             fg=ModernUI.COLORS['text_light'],
                             bg=ModernUI.COLORS['bg_main'])
        desc_label.pack(pady=(0, 15))
        
        # Sƒ±nƒ±f listesi frame
        list_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        list_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=10)
        
        # Scroll listbox
        scrollbar = ttk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        class_listbox = tk.Listbox(list_frame, selectmode=tk.MULTIPLE,
                                  font=ModernUI.FONTS['body'],
                                  yscrollcommand=scrollbar.set)
        
        # Sƒ±nƒ±flarƒ± ekle ve √∂ƒürenci sayƒ±larƒ±nƒ± g√∂ster
        for class_name in available_classes:
            student_count = sum(1 for record in self.excel_data 
                              if record.get('class_name', record.get('sƒ±nƒ±f', '')) == class_name)
            class_listbox.insert(tk.END, f"{class_name} ({student_count} √∂ƒürenci)")
        
        class_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=class_listbox.yview)
        
        # Butonlar
        button_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        button_frame.pack(fill=tk.X, padx=30, pady=15)
        
        def on_select():
            nonlocal selected_classes
            indices = class_listbox.curselection()
            if not indices:
                messagebox.showwarning("Uyarƒ±", "En az bir sƒ±nƒ±f se√ßmelisiniz.")
                return
            
            selected_classes = [available_classes[i] for i in indices]
            dialog.destroy()
        
        def on_cancel():
            nonlocal selected_classes
            selected_classes = []
            dialog.destroy()
        
        ttk.Button(button_frame, text="‚ùå ƒ∞ptal", command=on_cancel,
                  style='Warning.TButton').pack(side=tk.RIGHT, padx=(10, 0))
        ttk.Button(button_frame, text="‚úÖ Se√ß", command=on_select,
                  style='Success.TButton').pack(side=tk.RIGHT)
        
        dialog.wait_window()
        return selected_classes

    def show_individual_selection(self):
        """Bireysel √∂ƒürenci se√ßim penceresi"""
        dialog = tk.Toplevel(self.root)
        dialog.title("√ñƒürenci Se√ßimi")
        dialog.geometry("900x600")
        dialog.configure(bg=ModernUI.COLORS['bg_main'])
        dialog.grab_set()
        dialog.transient(self.root)
        
        selected_students = []
        
        # Ba≈ülƒ±k
        title_label = tk.Label(dialog, text="üë§ √ñƒürenci Se√ßimi",
                              font=('Segoe UI', 14, 'bold'),
                              fg=ModernUI.COLORS['text'],
                              bg=ModernUI.COLORS['bg_main'])
        title_label.pack(pady=(15, 10))
        
        # Arama frame
        search_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        search_frame.pack(fill=tk.X, padx=30, pady=(0, 10))
        
        tk.Label(search_frame, text="üîç Arama:", font=ModernUI.FONTS['body'],
                bg=ModernUI.COLORS['bg_main']).pack(side=tk.LEFT)
        
        search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=search_var,
                               font=ModernUI.FONTS['body'])
        search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(10, 0))
        
        # √ñƒürenci listesi frame
        list_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        list_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=10)
        
        # Scroll listbox
        scrollbar = ttk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        student_listbox = tk.Listbox(list_frame, selectmode=tk.MULTIPLE,
                                    font=ModernUI.FONTS['body'],
                                    yscrollcommand=scrollbar.set)
        student_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=student_listbox.yview)
        
        # √ñƒürenci verilerini hazƒ±rla
        student_list = []
        for i, record in enumerate(self.excel_data):
            # Ad bilgisini olu≈ütur - daha kapsamlƒ± s√ºtun arama
            name_parts = []
            
            # T√ºm mevcut s√ºtunlarƒ± kontrol et
            original_data = record.get('_original_data', {})
            
            # ƒ∞lk ad i√ßin geni≈ü s√ºtun arama
            first_name = ""
            first_name_cols = [
                'ad', 'Ad', 'AD', 'ADI', 'Adƒ±', 'adi',
                'name', 'first_name', 'firstName', 'First_Name',
                'isim', 'ƒ∞sim', 'ISIM', 'ƒ∞Sƒ∞M', 'Isim',
                'adƒ±', 'ismi'
            ]
            
            for col in first_name_cols:
                if col in original_data:
                    value = str(original_data[col]).strip()
                    if value and value.lower() not in ['nan', 'none', '', 'null']:
                        first_name = value
                        break
            
            # Soyad i√ßin geni≈ü s√ºtun arama
            last_name = ""
            last_name_cols = [
                'soyad', 'Soyad', 'SOYAD', 'SOYADI', 'Soyadƒ±', 'soyadi',
                'surname', 'last_name', 'lastName', 'Last_Name',
                'family_name', 'familyName', 'soyadƒ±'
            ]
            
            for col in last_name_cols:
                if col in original_data:
                    value = str(original_data[col]).strip()
                    if value and value.lower() not in ['nan', 'none', '', 'null']:
                        last_name = value
                        break
            
            # Tam ad kombinasyonu s√ºtunlarƒ± da kontrol et
            full_name_cols = [
                'ad_soyad', 'Ad_Soyad', 'AD_SOYAD', 'AdSoyad',
                'full_name', 'fullName', 'Full_Name',
                'tam_ad', 'Tam_Ad', 'TAM_AD', 'TamAd',
                'adsoyad', 'Adƒ±Soyadƒ±', 'isim_soyisim'
            ]
            
            full_name_found = ""
            for col in full_name_cols:
                if col in original_data:
                    value = str(original_data[col]).strip()
                    if value and value.lower() not in ['nan', 'none', '', 'null']:
                        full_name_found = value
                        break
            
            # ƒ∞sim olu≈üturma mantƒ±ƒüƒ±
            if full_name_found:
                # Tam ad bulunduysa onu kullan
                name_parts = [full_name_found]
            elif first_name and last_name:
                # Ad ve soyad ayrƒ± ayrƒ± bulunduysa birle≈ütir
                name_parts = [first_name, last_name]
            elif first_name:
                # Sadece ad bulunduysa
                name_parts = [first_name]
            elif last_name:
                # Sadece soyad bulunduysa
                name_parts = [last_name]
            else:
                # Hi√ßbir ad bilgisi bulunamadƒ±ysa, diƒüer s√ºtunlarƒ± kontrol et
                for col_name, col_value in original_data.items():
                    value = str(col_value).strip()
                    if (value and value.lower() not in ['nan', 'none', '', 'null'] and
                        len(value) > 2 and not value.isdigit()):
                        # ƒ∞sim gibi g√∂r√ºnen ilk deƒüeri al
                        name_parts = [value]
                        break
                
                # Hala bulunamadƒ±ysa varsayƒ±lan isim ver
                if not name_parts:
                    name_parts = [f"√ñƒürenci_{i+1}"]
            
            student_name = " ".join(name_parts)
            
            # Sƒ±nƒ±f bilgisini al
            class_name = "Bilinmiyor"
            class_cols = ['sƒ±nƒ±f', 'Sƒ±nƒ±f', 'SINIF', 'class', 'Class', 'class_name', 'sinif']
            for col in class_cols:
                if col in original_data:
                    value = str(original_data[col]).strip()
                    if value and value.lower() not in ['nan', 'none', '', 'null']:
                        class_name = value
                        break
            
            # √ñƒürenci numarasƒ±nƒ± al (varsa)
            student_no = ""
            no_cols = ['no', 'No', 'NO', 'numara', 'Numara', 'NUMARA', 'student_no', 'ogrenci_no']
            for col in no_cols:
                if col in original_data:
                    value = str(original_data[col]).strip()
                    if value and value.lower() not in ['nan', 'none', '', 'null']:
                        student_no = value
                        break
            
            # G√∂r√ºnt√º metni olu≈ütur
            if student_no:
                student_display = f"{student_name} ({student_no} - {class_name})"
            else:
                student_display = f"{student_name} ({class_name})"
            
            student_list.append((student_display, i))
        
        def update_student_list(filter_text=""):
            student_listbox.delete(0, tk.END)
            for display_name, index in student_list:
                if filter_text.lower() in display_name.lower():
                    student_listbox.insert(tk.END, display_name)
        
        # ƒ∞lk doldurma
        update_student_list()
        
        # Arama fonksiyonu
        def on_search_change(*args):
            update_student_list(search_var.get())
        
        search_var.trace('w', on_search_change)
        
        # Butonlar
        button_frame = tk.Frame(dialog, bg=ModernUI.COLORS['bg_main'])
        button_frame.pack(fill=tk.X, padx=30, pady=15)
        
        def on_select():
            nonlocal selected_students
            indices = student_listbox.curselection()
            if not indices:
                messagebox.showwarning("Uyarƒ±", "En az bir √∂ƒürenci se√ßmelisiniz.")
                return
            
            selected_students = []
            current_filter = search_var.get().lower()
            filtered_list = [(display, idx) for display, idx in student_list 
                           if current_filter in display.lower()]
            
            for listbox_index in indices:
                if listbox_index < len(filtered_list):
                    _, original_index = filtered_list[listbox_index]
                    selected_students.append(original_index)
            
            dialog.destroy()
        
        def on_cancel():
            nonlocal selected_students
            selected_students = []
            dialog.destroy()
        
        ttk.Button(button_frame, text="‚ùå ƒ∞ptal", command=on_cancel,
                  style='Warning.TButton').pack(side=tk.RIGHT, padx=(10, 0))
        ttk.Button(button_frame, text="‚úÖ Se√ß", command=on_select,
                  style='Success.TButton').pack(side=tk.RIGHT)
        
        dialog.wait_window()
        return selected_students

    def operation_finished(self):
        """ƒ∞≈ülem bittiƒüinde UI'ƒ± sƒ±fƒ±rla"""
        self.hide_cancel_button()
        self.enable_all_buttons()
        self.progress['value'] = 0
        self.current_operation = None

    def rename_photos(self):
        """Fotoƒüraflarƒ± Excel verilerine g√∂re yeniden adlandƒ±r"""
        try:
            if not self.school_name:
                self.log_message("‚ùå √ñnce okul adƒ±nƒ± girin.")
                return

            if not self.excel_data or not self.photo_directory:
                self.log_message("‚ùå Excel verisi ve fotoƒüraf dizini gerekli.")
                return

            selected_columns = self.get_selected_columns()
            if not selected_columns:
                self.log_message("‚ùå Adlandƒ±rma i√ßin en az bir s√ºtun se√ßin.")
                return

            self.update_status("Fotoƒüraflar adlandƒ±rƒ±lƒ±yor...")

            # Fotoƒüraflarƒ± al ve sƒ±rala
            photos = self.photo_processor.get_image_files(self.photo_directory)
            photos.sort()

            # Ana √ßƒ±ktƒ± dizini olu≈ütur - VesiKolayPro konumunda
            from datetime import datetime
            from utils import VesiKolayUtils
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            clean_school_name = self.clean_filename(self.school_name)

            # VesiKolayPro ana dizininde okul klas√∂r√º olu≈ütur
            school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

            # Tarih-saat alt klas√∂r√º
            base_output_dir = school_main_dir / timestamp

            # Dizin var mƒ± kontrol et
            if base_output_dir.exists():
                import time
                time.sleep(1)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                base_output_dir = school_main_dir / timestamp

            base_output_dir.mkdir(exist_ok=True)

            # Ana okul klas√∂r√ºn√º sƒ±nƒ±f deƒüi≈ükeninde sakla
            self.current_school_output_dir = school_main_dir

            # Adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflar i√ßin dizin
            renamed_dir = base_output_dir / "renamed"
            renamed_dir.mkdir(exist_ok=True)

            self.log_message(f"\nüöÄ === ADLANDIRMA ƒ∞≈ûLEMƒ∞ BA≈ûLIYOR ===")
            self.log_message(f"üìã Se√ßilen s√ºtunlar: {', '.join(selected_columns)}")
            self.log_message(f"üìÅ √áƒ±ktƒ± dizini: {base_output_dir.name}")

            # ƒ∞lerleme ba≈ülat
            total_count = min(len(photos), len(self.excel_data))
            self.progress['maximum'] = total_count

            success_count = 0
            error_count = 0
            renamed_photos = []
            photos_by_class = {}

            for i in range(total_count):
                # ƒ∞ptal kontrol√º
                if self.cancel_requested.is_set():
                    self.log_message("‚èπÔ∏è ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan iptal edildi.")
                    break

                try:
                    photo = photos[i]
                    data_record = self.excel_data[i]

                    # Yeni dosya adƒ± olu≈ütur (√ßoklu s√ºtun desteƒüi)
                    name_parts = []
                    for col in selected_columns:
                        if col in data_record.get('_original_data', {}):
                            value = str(data_record['_original_data'][col]).strip()
                            if value and value != 'nan':
                                name_parts.append(value)

                    if not name_parts:
                        name_parts = [f"photo_{i+1}"]

                    # Dosya adƒ±nƒ± temizle ve olu≈ütur (se√ßilen ayra√ßla)
                    separator = self.separator_var.get() if hasattr(self, 'separator_var') else "_"
                    if separator == " ":
                        # Bo≈üluk se√ßildiƒüinde ger√ßekten bo≈üluk kullan
                        base_name = " ".join(name_parts)
                    else:
                        base_name = separator.join(name_parts)
                    clean_name = self.clean_filename(base_name, preserve_spaces=(separator == " "))
                    new_filename = f"{clean_name}{photo.suffix}"

                    # Dosyayƒ± kopyala ve yeniden adlandƒ±r
                    new_path = renamed_dir / new_filename

                    # Aynƒ± isimde dosya varsa numara ekle
                    counter = 1
                    original_new_path = new_path
                    while new_path.exists():
                        stem = original_new_path.stem
                        suffix = original_new_path.suffix
                        new_path = renamed_dir / f"{stem}_{counter}{suffix}"
                        counter += 1

                    # Dosyayƒ± kopyala
                    FileUtils.copy_file_safe(photo, new_path, overwrite=True)

                    # Watermark ekle (eƒüer aktifse)
                    if self.watermark_enabled.get():
                        self.apply_watermark_to_photo(new_path)

                    renamed_photos.append(new_path)

                    # Sƒ±nƒ±f bilgisini al (sƒ±nƒ±f organizasyonu i√ßin)
                    if self.organize_by_class.get():
                        class_name = self.photo_processor._get_class_name_from_record(data_record)
                        if not class_name:
                            class_name = "Sƒ±nƒ±f_Bilgisi_Yok"

                        if class_name not in photos_by_class:
                            photos_by_class[class_name] = []
                        photos_by_class[class_name].append(new_path)

                    success_count += 1
                    # T√ºm i≈ülemleri g√∂ster
                    self.log_message(f"‚úÖ {i+1:3d}. {photo.name} ‚Üí {new_path.name}")

                except Exception as e:
                    error_count += 1
                    self.log_message(f"‚ùå Hata {i+1}: {photo.name} - {e}")

                # ƒ∞lerlemeyi g√ºncelle
                self.progress['value'] = i + 1
                self.update_status(f"ƒ∞≈üleniyor: {i+1}/{total_count}")

            # Sƒ±nƒ±f bazƒ±nda organizasyon
            if self.organize_by_class.get() and photos_by_class:
                class_dir = base_output_dir / "by_class"
                class_dir.mkdir(exist_ok=True)

                self.log_message(f"\nüìÇ === SINIF BAZINDA ORGANƒ∞ZASYON ===")
                for class_name, class_photos in photos_by_class.items():
                    if self.cancel_requested.is_set():
                        break

                    class_folder = class_dir / self.clean_filename(class_name)
                    class_folder.mkdir(exist_ok=True)

                    for photo_path in class_photos:
                        if self.cancel_requested.is_set():
                            break
                        class_photo_path = class_folder / photo_path.name
                        FileUtils.copy_file_safe(photo_path, class_photo_path, overwrite=True)

                    self.log_message(f"üìÅ {class_name}: {len(class_photos)} fotoƒüraf")

            # Sonu√ßlarƒ± g√∂ster
            if not self.cancel_requested.is_set():
                self.log_message(f"\nüéâ === ƒ∞≈ûLEM TAMAMLANDI ===")
                self.log_message(f"‚úÖ Ba≈üarƒ±lƒ±: {success_count}")
                self.log_message(f"‚ùå Hatalƒ±: {error_count}")
                self.log_message(f"üìä Toplam: {total_count}")
                self.log_message(f"üìÅ √áƒ±ktƒ± dizini: {base_output_dir.name}")

                self.update_status(f"Tamamlandƒ±: {success_count}/{total_count} ba≈üarƒ±lƒ±")

                if success_count > 0:
                    result_msg = f"üéâ Adlandƒ±rma tamamlandƒ±!\n\n‚úÖ Ba≈üarƒ±lƒ±: {success_count}\n‚ùå Hatalƒ±: {error_count}\nüìÅ √áƒ±ktƒ±: {base_output_dir.name}"
                    if self.organize_by_class.get():
                        result_msg += f"\nüìÇ Sƒ±nƒ±f organizasyonu: {len(photos_by_class)} sƒ±nƒ±f"

                    # √áƒ±ktƒ± klas√∂r√º eri≈üim butonunu aktif et
                    self.root.after(0, lambda: self.output_access_button.config(state="normal"))

                    # UI thread'de messagebox g√∂ster
                    self.root.after(0, lambda: messagebox.showinfo("Ba≈üarƒ±lƒ±", result_msg))
            else:
                self.update_status("ƒ∞≈ülem iptal edildi")

        except Exception as e:
            self.log_message(f"‚ùå Genel hata: {e}")
            self.update_status("Hata olu≈ütu")

        finally:
            # UI thread'de cleanup
            self.root.after(0, self.operation_finished)

    def crop_and_resize_photos(self):
        """Fotoƒüraflarƒ± boyutlandƒ±r ve kƒ±rp"""
        try:
            if not self.sizing_enabled.get():
                self.log_message("‚ö†Ô∏è √ñnce boyutlandƒ±rma se√ßeneƒüini aktifle≈ütirin.")
                return

            if not self.school_name:
                self.log_message("‚ùå √ñnce okul adƒ±nƒ± girin.")
                return

            if not self.photo_directory:
                self.log_message("‚ùå Fotoƒüraf dizini gerekli.")
                return

            # PNG dosyalarƒ± i√ßin uyarƒ± g√∂ster
            png_files = list(self.photo_directory.glob("*.png"))
            if png_files:
                result = messagebox.askyesno("PNG Dosyalarƒ± Tespit Edildi", 
                                           f"Dizinde {len(png_files)} adet PNG dosyasƒ± bulundu.\n\n"
                                           "‚ö†Ô∏è PNG dosyalarƒ± desteklenmektedir ancak en iyi sonu√ß i√ßin JPG formatƒ±ndaki dosyalarƒ± kullanmanƒ±z √∂nerilir.\n\n"
                                           "Boyutlandƒ±rma ve watermark i≈ülemlerinde JPG formatƒ± daha kararlƒ± sonu√ßlar verir.\n\n"
                                           "Devam etmek istiyor musunuz?")
                if not result:
                    self.log_message("üí≠ Kullanƒ±cƒ± PNG dosyalarƒ± nedeniyle i≈ülemi iptal etti.")
                    return
                    
                self.log_message(f"‚ö†Ô∏è PNG dosyalarƒ±yla i≈ülem devam ediyor: {len(png_files)} adet")

            # Adlandƒ±rma yapƒ±lacaksa Excel verisi ve s√ºtun se√ßimi kontrol et
            use_naming = self.sizing_with_naming.get()
            selected_columns = []

            if use_naming:
                if not self.excel_data:
                    self.log_message("‚ùå Adlandƒ±rma i√ßin Excel verisi gerekli.")
                    return

                selected_columns = self.get_selected_columns()
                if not selected_columns:
                    self.log_message("‚ùå Adlandƒ±rma i√ßin en az bir s√ºtun se√ßin.")
                    return

            self.update_status("Fotoƒüraflar kƒ±rpƒ±lƒ±yor ve boyutlandƒ±rƒ±lƒ±yor...")

            # Boyut ayarlarƒ±nƒ± al
            size_config = self.get_size_configuration()
            if not size_config:
                self.log_message("‚ùå Boyut yapƒ±landƒ±rmasƒ± alƒ±namadƒ±.")
                return

            # Fotoƒüraflarƒ± al ve sƒ±rala
            photos = self.photo_processor.get_image_files(self.photo_directory)
            photos.sort()

            # Ana √ßƒ±ktƒ± dizini olu≈ütur - VesiKolayPro konumunda
            from datetime import datetime
            from utils import VesiKolayUtils
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            clean_school_name = self.clean_filename(self.school_name)

            # VesiKolayPro ana dizininde okul klas√∂r√º olu≈ütur
            school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

            # Tarih-saat alt klas√∂r√º
            base_output_dir = school_main_dir / timestamp

            if base_output_dir.exists():
                import time
                time.sleep(1)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                base_output_dir = school_main_dir / timestamp

            base_output_dir.mkdir(exist_ok=True)

            # Boyutlandƒ±rƒ±lmƒ±≈ü fotoƒüraflar i√ßin dizin
            folder_suffix = "_named" if use_naming else "_original_names"
            sized_dir = base_output_dir / (size_config['folder_name'] + folder_suffix)
            sized_dir.mkdir(exist_ok=True)

            self.log_message(f"\n‚úÇÔ∏è === FOTOƒûRAF BOYUTLANDIRMA ƒ∞≈ûLEMƒ∞ BA≈ûLIYOR ===")
            if use_naming:
                self.log_message(f"üìã Se√ßilen s√ºtunlar: {', '.join(selected_columns)}")
            else:
                self.log_message(f"üìã Adlandƒ±rma: Orijinal dosya adlarƒ± korunacak")
            self.log_message(f"üìè Boyut: {size_config['display_name']}")
            self.log_message(f"üìÅ √áƒ±ktƒ± dizini: {sized_dir.name}")

            # ƒ∞lerleme ba≈ülat
            if use_naming and self.excel_data:
                total_count = min(len(photos), len(self.excel_data))
            else:
                total_count = len(photos)
            self.progress['maximum'] = total_count

            success_count = 0
            error_count = 0
            processed_photos = []

            for i in range(total_count):
                # ƒ∞ptal kontrol√º
                if self.cancel_requested.is_set():
                    self.log_message("‚èπÔ∏è ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan iptal edildi.")
                    break

                try:
                    photo = photos[i]

                    if use_naming and self.excel_data and i < len(self.excel_data):
                        # Adlandƒ±rma yapƒ±lacak
                        data_record = self.excel_data[i]

                        # Yeni dosya adƒ± olu≈ütur
                        name_parts = []
                        for col in selected_columns:
                            if col in data_record.get('_original_data', {}):
                                value = str(data_record['_original_data'][col]).strip()
                                if value and value != 'nan':
                                    name_parts.append(value)

                        if not name_parts:
                            name_parts = [f"photo_{i+1}"]

                        # Dosya adƒ±nƒ± temizle ve olu≈ütur
                        separator = self.separator_var.get() if hasattr(self, 'separator_var') else "_"
                        if separator == " ":
                            base_name = " ".join(name_parts)
                        else:
                            base_name = separator.join(name_parts)
                        clean_name = self.clean_filename(base_name, preserve_spaces=(separator == " "))
                    else:
                        # Orijinal dosya adƒ±nƒ± kullan
                        clean_name = photo.stem

                    # Se√ßilen formata g√∂re dosya uzantƒ±sƒ±nƒ± belirle
                    # output_format = size_config.get('format', 'jpg') # √áƒ±ktƒ± formatƒ± se√ßimi kaldƒ±rƒ±ldƒ±
                    file_extension = ".jpg" # Sabit JPG

                    # √áƒ±ktƒ± dosya yolu
                    output_path = sized_dir / f"{clean_name}{file_extension}"

                    # Aynƒ± isimde dosya varsa numara ekle
                    counter = 1
                    original_output_path = output_path
                    while output_path.exists():
                        stem = original_output_path.stem
                        suffix = original_output_path.suffix
                        output_path = sized_dir / f"{stem}_{counter}{suffix}"
                        counter += 1

                    # Fotoƒürafƒ± kƒ±rp ve boyutlandƒ±r
                    success = self.process_single_photo(photo, output_path, size_config)

                    if success:
                        processed_photos.append(output_path)
                        success_count += 1
                        self.log_message(f"‚úÖ {i+1:3d}. {photo.name} ‚Üí {output_path.name}")
                    else:
                        error_count += 1
                        self.log_message(f"‚ùå {i+1:3d}. {photo.name} - Boyutlandƒ±rma ba≈üarƒ±sƒ±z")

                except Exception as e:
                    error_count += 1
                    self.log_message(f"‚ùå Hata {i+1}: {photo.name} - {e}")

                # ƒ∞lerlemeyi g√ºncelle
                self.progress['value'] = i + 1
                self.update_status(f"ƒ∞≈üleniyor: {i+1}/{total_count}")

            # Sonu√ßlarƒ± g√∂ster
            if not self.cancel_requested.is_set():
                self.log_message(f"\nüéâ === BOYUTLANDIRMA ƒ∞≈ûLEMƒ∞ TAMAMLANDI ===")
                self.log_message(f"‚úÖ Ba≈üarƒ±lƒ±: {success_count}")
                self.log_message(f"‚ùå Hatalƒ±: {error_count}")
                self.log_message(f"üìä Toplam: {total_count}")
                self.log_message(f"üìÅ √áƒ±ktƒ± dizini: {sized_dir.name}")

                self.update_status(f"Tamamlandƒ±: {success_count}/{total_count} ba≈üarƒ±lƒ±")

                if success_count > 0:
                    naming_info = " (Yeniden adlandƒ±rƒ±ldƒ±)" if use_naming else " (Orijinal adlar)"
                    result_msg = f"‚úÇÔ∏è Boyutlandƒ±rma tamamlandƒ±!{naming_info}\n\n‚úÖ Ba≈üarƒ±lƒ±: {success_count}\n‚ùå Hatalƒ±: {error_count}\nüìÅ √áƒ±ktƒ±: {sized_dir.name}"
                    
                    # √áƒ±ktƒ± klas√∂r√º eri≈üim butonunu aktif et
                    self.root.after(0, lambda: self.output_access_button.config(state="normal"))
                    
                    self.root.after(0, lambda: messagebox.showinfo("Ba≈üarƒ±lƒ±", result_msg))
            else:
                self.update_status("ƒ∞≈ülem iptal edildi")

        except Exception as e:
            self.log_message(f"‚ùå Genel hata: {e}")
            self.update_status("Hata olu≈ütu")

        finally:
            self.root.after(0, self.operation_finished)

    def generate_class_pdfs(self):
        """Sƒ±nƒ±f bazƒ±nda PDF'leri olu≈ütur"""
        try:
            if not self.school_name:
                self.log_message("‚ùå √ñnce okul adƒ±nƒ± girin.")
                return

            if not self.excel_data or not self.photo_directory:
                self.log_message("‚ùå Excel verisi ve fotoƒüraf dizini gerekli.")
                return

            selected_columns = self.get_selected_columns()
            if not selected_columns:
                self.log_message("‚ùå PDF olu≈üturmak i√ßin s√ºtun se√ßimi gerekli.")
                return

            self.update_status("PDF dosyalarƒ± olu≈üturuluyor...")

            from pdf_generator import PDFGenerator
            from utils import VesiKolayUtils

            # VesiKolayPro ana dizinindeki okul klas√∂r√ºn√º bul
            school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

            # En son olu≈üturulan tarih-saat klas√∂r√ºn√º bul
            timestamp_dirs = [d for d in school_main_dir.iterdir() 
                             if d.is_dir() and d.name.replace('_', '').replace('-', '').isdigit()]

            if not timestamp_dirs:
                self.log_message("‚ùå √ñnce fotoƒüraflarƒ± adlandƒ±rƒ±n.")
                return

            # En son olu≈üturulan dizini se√ß
            base_output_dir = max(timestamp_dirs, key=lambda x: x.stat().st_mtime)
            renamed_dir = base_output_dir / "renamed"

            if not renamed_dir.exists():
                self.log_message("‚ùå Adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflar bulunamadƒ±. √ñnce fotoƒüraflarƒ± adlandƒ±rƒ±n.")
                return

            # PDF √ßƒ±ktƒ± dizini
            pdf_dir = base_output_dir / "pdfs"
            pdf_dir.mkdir(parents=True, exist_ok=True)

            # Adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflarƒ± al
            renamed_photos = self.photo_processor.get_image_files(renamed_dir)
            renamed_photos.sort()

            # Sƒ±nƒ±f bazƒ±nda fotoƒüraflarƒ± grupla - manuel olarak yapƒ±yoruz
            photos_by_class = {}

            for i, photo_path in enumerate(renamed_photos):
                if self.cancel_requested.is_set():
                    break

                if i < len(self.excel_data):
                    record = self.excel_data[i]

                    # Sƒ±nƒ±f adƒ±nƒ± al
                    class_name = record.get('class_name', record.get('sƒ±nƒ±f', 'Sƒ±nƒ±f_Bilgisi_Yok'))
                    if not class_name or str(class_name).lower() in ['nan', 'none', '']:
                        class_name = 'Sƒ±nƒ±f_Bilgisi_Yok'

                    # √ñƒürenci adƒ±nƒ± olu≈ütur
                    name_parts = []
                    for col in selected_columns:
                        if col in record.get('_original_data', {}):
                            value = str(record['_original_data'][col]).strip()
                            if value and value != 'nan':
                                name_parts.append(value)

                    if not name_parts:
                        name_parts = [f"√ñƒürenci_{i+1}"]

                    student_name = " ".join(name_parts)

                    # Sƒ±nƒ±f listesine ekle
                    if class_name not in photos_by_class:
                        photos_by_class[class_name] = []

                    photos_by_class[class_name].append({
                        'filename': photo_path.name,
                        'name': student_name,
                        'display_name': student_name
                    })

            if not photos_by_class:
                self.log_message("‚ùå Sƒ±nƒ±f bilgisi bulunamadƒ± veya fotoƒüraflar hen√ºz adlandƒ±rƒ±lmamƒ±≈ü.")
                self.update_status("PDF olu≈üturulamadƒ± - Sƒ±nƒ±f bilgisi yok")
                return

            # PDF generator
            pdf_generator = PDFGenerator()

            self.log_message(f"\nüìÑ === PDF OLU≈ûTURMA BA≈ûLIYOR ===")
            self.log_message(f"üìÇ {len(photos_by_class)} sƒ±nƒ±f i√ßin PDF olu≈üturulacak")

            success_count = 0
            total_classes = len(photos_by_class)

            for i, (class_name, photos_info) in enumerate(photos_by_class.items()):
                if self.cancel_requested.is_set():
                    break

                try:
                    self.update_status(f"PDF olu≈üturuluyor: {i+1}/{total_classes}")

                    # G√ºvenli dosya adƒ± olu≈ütur
                    safe_class_name = self.clean_filename(class_name)
                    pdf_path = pdf_dir / f"{safe_class_name}_fotoƒüraf_listesi.pdf"

                    # Okul adƒ±nƒ± al
                    school_name = self.school_name if self.school_name else "VesiKolay Pro"

                    # PDF olu≈ütur - fotoƒüraf grid formatƒ±nda
                    success = pdf_generator.generate_class_photo_grid(
                        photos_with_names=photos_info,
                        class_name=class_name,
                        school_name=school_name,
                        output_path=pdf_path,
                        photos_dir=renamed_dir
                    )
                    
                    # ƒ∞lerleme g√ºncelleme
                    self.update_progress_with_percentage(i + 1, total_classes)

                    if success:
                        success_count += 1
                        self.log_message(f"‚úÖ {class_name}: {pdf_path.name} ({len(photos_info)} fotoƒüraf)")
                    else:
                        self.log_message(f"‚ùå {class_name}: PDF olu≈üturulamadƒ±")

                except Exception as e:
                    self.log_message(f"‚ùå {class_name}: {e}")

            if not self.cancel_requested.is_set():
                self.log_message(f"\nüéâ PDF olu≈üturma tamamlandƒ±!")
                self.log_message(f"‚úÖ Ba≈üarƒ±lƒ±: {success_count}/{total_classes} sƒ±nƒ±f")
                self.log_message(f"üìÅ PDF dizini: {pdf_dir.name}")

                self.update_status(f"PDF tamamlandƒ±: {success_count}/{total_classes}")

                if success_count > 0:
                    result_msg = f"üìÑ PDF olu≈üturma tamamlandƒ±!\n\n‚úÖ {success_count}/{total_classes} sƒ±nƒ±f\nüìÅ Konum: {pdf_dir.name}"
                    
                    # PDF eri≈üim butonunu aktif et
                    self.root.after(0, lambda: self.pdf_access_button.config(state="normal"))
                    
                    self.root.after(0, lambda: messagebox.showinfo("Ba≈üarƒ±lƒ±", result_msg))
            else:
                self.update_status("ƒ∞≈ülem iptal edildi")

        except Exception as e:
            self.log_message(f"‚ùå PDF olu≈üturma hatasƒ±: {e}")
            self.update_status("PDF olu≈üturma hatasƒ±")

        finally:
            self.root.after(0, self.operation_finished)

    def generate_id_cards(self):
        """√ñƒürenci kimlik kartlarƒ±nƒ± olu≈ütur"""
        try:
            if not self.school_name:
                self.log_message("‚ùå √ñnce okul adƒ±nƒ± girin.")
                return

            if not self.excel_data or not self.photo_directory:
                self.log_message("‚ùå Excel verisi ve fotoƒüraf dizini gerekli.")
                return

            self.update_status("Kimlik kartlarƒ± olu≈üturuluyor...")

            from pdf_generator import PDFGenerator
            from utils import VesiKolayUtils

            # VesiKolayPro ana dizinindeki okul klas√∂r√ºn√º bul
            school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

            # En son olu≈üturulan tarih-saat klas√∂r√ºn√º bul
            timestamp_dirs = [d for d in school_main_dir.iterdir() 
                             if d.is_dir() and d.name.replace('_', '').replace('-', '').isdigit()]

            if not timestamp_dirs:
                self.log_message("‚ùå √ñnce fotoƒüraflarƒ± adlandƒ±rƒ±n.")
                return

            # En son olu≈üturulan dizini se√ß
            base_output_dir = max(timestamp_dirs, key=lambda x: x.stat().st_mtime)
            renamed_dir = base_output_dir / "renamed"

            if not renamed_dir.exists():
                self.log_message("‚ùå Adlandƒ±rƒ±lmƒ±≈ü fotoƒüraflar bulunamadƒ±.")
                return

            # Kimlik kartƒ± √ßƒ±ktƒ± dizini
            id_card_dir = base_output_dir / "id_cards"
            id_card_dir.mkdir(parents=True, exist_ok=True)

            # PDF generator
            pdf_generator = PDFGenerator()

            # Set school logo path if available
            if hasattr(self, 'school_logo_path'):
                pdf_generator.school_logo_path = self.school_logo_path

            # Kapsam tipine g√∂re filtreleme yap
            scope_type = getattr(self, 'id_card_scope_type', 'all')
            selected_items = getattr(self, 'id_card_selected_items', None)
            
            # ƒ∞≈ülenecek kayƒ±tlarƒ± belirle
            if scope_type == "class" and selected_items:
                # Sƒ±nƒ±f bazlƒ± filtreleme
                filtered_data = []
                for i, record in enumerate(self.excel_data):
                    class_name = record.get('class_name', record.get('sƒ±nƒ±f', ''))
                    if str(class_name) in selected_items:
                        filtered_data.append((i, record))
                self.log_message(f"üìö Se√ßili sƒ±nƒ±flar: {', '.join(selected_items)}")
                self.log_message(f"üë• Filtrelenmi≈ü √∂ƒürenci sayƒ±sƒ±: {len(filtered_data)}")
            elif scope_type == "individual" and selected_items:
                # Bireysel filtreleme
                filtered_data = []
                for index in selected_items:
                    if index < len(self.excel_data):
                        filtered_data.append((index, self.excel_data[index]))
                self.log_message(f"üë§ Se√ßili √∂ƒürenci sayƒ±sƒ±: {len(filtered_data)}")
            else:
                # T√ºm liste
                filtered_data = [(i, record) for i, record in enumerate(self.excel_data)]
                self.log_message(f"üìã T√ºm √∂ƒürenci listesi: {len(filtered_data)} √∂ƒürenci")

            # √ñƒürenci verilerini hazƒ±rla ve fotoƒüraf dosya adlarƒ±nƒ± e≈üle≈ütir
            students_for_cards = []
            renamed_photos = self.photo_processor.get_image_files(renamed_dir)

            for original_index, record in filtered_data:
                if self.cancel_requested.is_set():
                    break

                # Fotoƒüraf dosya adƒ±nƒ± belirle
                photo_filename = ""
                if original_index < len(renamed_photos):
                    photo_filename = renamed_photos[original_index].name

                # Kullanƒ±cƒ±nƒ±n se√ßtiƒüi s√ºtunlardan veri olu≈ütur
                student_data = {
                    'school_name': self.school_name,
                    'photo_filename': photo_filename,
                    'school_year': self.school_year_var.get() if hasattr(self, 'school_year_var') else "2025-2026",
                    'selected_columns': getattr(self, 'id_card_selected_columns', []),
                    'column_data': {}
                }
                
                # Se√ßili s√ºtunlar i√ßin verileri ekle
                if hasattr(self, 'id_card_selected_columns'):
                    for column in self.id_card_selected_columns:
                        if column in record.get('_original_data', {}):
                            value = str(record['_original_data'][column]).strip()
                            if value and value != 'nan':
                                student_data['column_data'][column] = value
                            else:
                                student_data['column_data'][column] = ""
                        else:
                            student_data['column_data'][column] = ""
                
                # Gradient renk ayarlarƒ±nƒ± ekle
                if hasattr(self, 'id_card_color_settings'):
                    student_data.update(self.id_card_color_settings)
                
                students_for_cards.append(student_data)

            # Logo yollarƒ±nƒ± kimlik kartƒ± verilerine ekle
            main_logo_path = None
            second_logo_path = None
            
            if hasattr(self, 'id_card_settings'):
                main_logo_path = self.id_card_settings.get('main_logo_path')
                second_logo_path = self.id_card_settings.get('second_logo_path')
            
            # Fallback to old logo path
            if not main_logo_path:
                if hasattr(self, 'id_card_logo_path') and self.id_card_logo_path:
                    main_logo_path = self.id_card_logo_path
                elif hasattr(self, 'school_logo_path') and self.school_logo_path:
                    main_logo_path = self.school_logo_path
            
            for student in students_for_cards:
                if main_logo_path:
                    student['main_logo_path'] = str(main_logo_path)
                    student['logo_path'] = str(main_logo_path)  # Backward compatibility
                if second_logo_path:
                    student['second_logo_path'] = str(second_logo_path)
                
                # Add all ID card settings
                if hasattr(self, 'id_card_settings'):
                    student.update(self.id_card_settings)

            if self.cancel_requested.is_set():
                self.update_status("ƒ∞≈ülem iptal edildi")
                return

            # Okul adƒ±nƒ± temizle
            clean_school_name = self.clean_filename(self.school_name)
            
            # Kapsama g√∂re dosya adƒ± olu≈ütur
            if scope_type == "class" and selected_items:
                class_suffix = "_".join([self.clean_filename(c) for c in selected_items[:3]])
                if len(selected_items) > 3:
                    class_suffix += "_ve_diger"
                pdf_path = id_card_dir / f"{clean_school_name}_kimlik_kartlari_{class_suffix}.pdf"
            elif scope_type == "individual":
                pdf_path = id_card_dir / f"{clean_school_name}_secili_ogrenci_kimlik_kartlari.pdf"
            else:
                pdf_path = id_card_dir / f"{clean_school_name}_ogrenci_kimlik_kartlari.pdf"

            # ƒ∞lerleme callback fonksiyonu tanƒ±mla
            def progress_callback(progress_percent, message):
                # Ana thread'e g√ºvenli ≈üekilde ilerleme g√ºncellemesi g√∂nder
                self.root.after(0, lambda: self.update_progress_with_percentage(
                    int(progress_percent), 100))
                self.root.after(0, lambda: self.update_status(message, "processing"))

            success = pdf_generator.generate_id_cards(
                people=students_for_cards,
                template_type="student", 
                output_path=pdf_path,
                photos_dir=renamed_dir,
                progress_callback=progress_callback
            )

            if success and not self.cancel_requested.is_set():
                self.log_message(f"\nüÜî === Kƒ∞MLƒ∞K KARTLARI OLU≈ûTURULDU ===")
                self.log_message(f"‚úÖ {len(students_for_cards)} √∂ƒürenci kimlik kartƒ±")
                self.log_message(f"üìÅ √áƒ±ktƒ±: {pdf_path.name}")

                self.update_status(f"Kimlik kartlarƒ± tamamlandƒ±: {len(students_for_cards)} √∂ƒürenci")

                # Kimlik kartlarƒ± eri≈üim butonunu aktif et
                self.root.after(0, lambda: self.id_cards_access_button.config(state="normal"))

                result_msg = f"üÜî Kimlik kartlarƒ± olu≈üturuldu!\n\n‚úÖ {len(students_for_cards)} √∂ƒürenci\nüìÅ Konum: {id_card_dir.name}"
                self.root.after(0, lambda: messagebox.showinfo("Ba≈üarƒ±lƒ±", result_msg))
            elif self.cancel_requested.is_set():
                self.update_status("ƒ∞≈ülem iptal edildi")
            else:
                self.log_message("‚ùå Kimlik kartlarƒ± olu≈üturulamadƒ±.")

        except Exception as e:
            self.log_message(f"‚ùå Kimlik kartƒ± olu≈üturma hatasƒ±: {e}")
            self.update_status("Kimlik kartƒ± hatasƒ±")

        finally:
            self.root.after(0, self.operation_finished)

    def _get_custom_file_size_limit(self):
        """√ñzel boyut i√ßin dosya boyutu sƒ±nƒ±rƒ±nƒ± hesapla"""
        if not hasattr(self, 'custom_max_size_var') or not self.custom_max_size_var.get().strip():
            return None  # Sƒ±nƒ±r yok

        try:
            max_size_kb = int(self.custom_max_size_var.get())
            if max_size_kb > 0:
                return (1, max_size_kb)  # Min 1 KB, Max kullanƒ±cƒ± tanƒ±mlƒ±
            else:
                return None
        except ValueError:
            return None

    def get_size_configuration(self):
        """Se√ßilen boyut yapƒ±landƒ±rmasƒ±nƒ± d√∂nd√ºr"""
        selected_display = self.size_combo.get()
        size_type = self.size_display_values.get(selected_display, "e_okul")
        # output_format = self.output_format.get() # √áƒ±ktƒ± formatƒ± se√ßimi kaldƒ±rƒ±ldƒ±
        output_format = 'jpg' # Sabit JPG

        configurations = {
            'e_okul': {
                'width_mm': 35,
                'height_mm': 45,
                'display_name': '35mm x 45mm (E-Okul)',
                'folder_name': 'E-Okul',
                'file_size_limit': (20, 150),  # KB cinsinden min-max
                'quality': 85,
                'dpi': 300,  # Minimum 300 DPI
                'format': output_format
            },
            'acik_lise': {
                'width_px': 394,
                'height_px': 512,
                'display_name': '394px x 512px (A√ßƒ±k Lise)',
                'folder_name': 'Acik_Lise',
                'file_size_limit': (1, 150),  # KB cinsinden min-max
                'quality': 90,
                'dpi': 400,  # A√ßƒ±k Lise i√ßin zorunlu 400 DPI
                'min_dpi': 400,  # Minimum DPI kontrol√º
                'format': 'jpg',
                'force_biometric': True,  # Biyometrik kƒ±rpma zorla
                'white_background': True  # Beyaz arka plan zorla
            },
            'mebbis': {
                'width_px': 394,
                'height_px': 512,
                'display_name': '394px x 512px (MEBBIS)',
                'folder_name': 'MEBBIS',
                'file_size_limit': (1, 150),  # KB cinsinden min-max
                'quality': 90,
                'dpi': 300,  # 300 DPI
                'format': 'jpg',
                'force_biometric': True,  # Biyometrik kƒ±rpma zorla
                'white_background': True  # Beyaz arka plan zorla
            },
            'biometric': {
                'width_mm': 50,
                'height_mm': 60,
                'display_name': '50mm x 60mm (Biyometrik)',
                'folder_name': 'Biyometrik',
                'file_size_limit': None,  # Dosya boyutu sƒ±nƒ±rƒ± yok
                'quality': 95,
                'dpi': 300,  # Minimum 300 DPI
                'format': output_format
            },
            'vesikalik': {
                'width_mm': 45,
                'height_mm': 60,
                'display_name': '45mm x 60mm (Vesikalƒ±k)',
                'folder_name': 'Vesikalik',
                'file_size_limit': None,  # Dosya boyutu sƒ±nƒ±rƒ± yok
                'quality': 95,
                'dpi': 300,  # Minimum 300 DPI
                'format': output_format
            },
            'passport': {
                'width_mm': 35,
                'height_mm': 35,
                'display_name': '35mm x 35mm (Pasaport/Vize)',
                'folder_name': 'Pasaport',
                'file_size_limit': None,  # Dosya boyutu sƒ±nƒ±rƒ± yok
                'quality': 95,
                'dpi': 300,  # Minimum 300 DPI
                'format': output_format
            },
            'license': {
                'width_mm': 25,
                'height_mm': 35,
                'display_name': '25mm x 35mm (Ehliyet)',
                'folder_name': 'Ehliyet',
                'file_size_limit': None,  # Dosya boyutu sƒ±nƒ±rƒ± yok
                'quality': 95,
                'dpi': 300,  # Minimum 300 DPI
                'format': output_format
            },
            'custom': {
                'width': float(self.custom_width_var.get()) if self.custom_width_var.get().replace('.', '').replace(',', '').isdigit() else 35,
                'height': float(self.custom_height_var.get()) if self.custom_height_var.get().replace('.', '').replace(',', '').isdigit() else 45,
                'width_mm': float(self.custom_width_var.get()) if self.custom_width_var.get().replace('.', '').replace(',', '').isdigit() else 35,
                'height_mm': float(self.custom_height_var.get()) if self.custom_height_var.get().replace('.', '').replace(',', '').isdigit() else 45,
                'unit': self.custom_unit_var.get() if hasattr(self, 'custom_unit_var') else 'mm',
                'display_name': f'{self.custom_width_var.get()}{self.custom_unit_var.get() if hasattr(self, "custom_unit_var") else "mm"} x {self.custom_height_var.get()}{self.custom_unit_var.get() if hasattr(self, "custom_unit_var") else "mm"} (√ñzel)',
                'folder_name': 'Ozel_Boyut',
                'file_size_limit': self._get_custom_file_size_limit(),
                'quality': 95,
                'dpi': int(self.custom_dpi_var.get()) if hasattr(self, 'custom_dpi_var') and self.custom_dpi_var.get().isdigit() else 300,
                'format': output_format
            },
            'original': {
                'width_mm': 0,
                'height_mm': 0,
                'display_name': 'Orijinal Boyut',
                'folder_name': 'Orijinal',
                'file_size_limit': None,
                'quality': 95,
                'dpi': 300,
                'format': 'original'
            }
        }

        return configurations.get(size_type)

    def process_single_photo(self, input_path, output_path, size_config):
        """Tek bir fotoƒürafƒ± i≈üle (kƒ±rp ve boyutlandƒ±r)"""
        try:
            # Dosya varlƒ±ƒüƒ±nƒ± kontrol et
            if not input_path.exists():
                self.log_message(f"‚ùå Dosya bulunamadƒ±: {input_path}")
                return False

            # Dosya boyutunu kontrol et
            if input_path.stat().st_size == 0:
                self.log_message(f"‚ùå Bo≈ü dosya: {input_path}")
                return False

            from photo_processor import CropDimensions

            # Orijinal format korunacaksa dosya uzantƒ±sƒ±nƒ± al
            # if size_config.get('format') == 'original': # √áƒ±ktƒ± formatƒ± se√ßimi kaldƒ±rƒ±ldƒ±
            #     original_extension = input_path.suffix.lower()
            #     output_path = output_path.with_suffix(original_extension)

            # Boyutlarƒ± belirle (pixel veya mm)
            dpi = size_config.get('dpi', 300)
            min_dpi = size_config.get('min_dpi', None)

            if 'width_px' in size_config and 'height_px' in size_config:
                # Pixel boyutlarƒ± (A√ßƒ±k Lise gibi)
                dimensions = CropDimensions(
                    width=size_config['width_px'],
                    height=size_config['height_px'],
                    unit='px',
                    dpi=dpi,
                    min_dpi=min_dpi
                )
            elif size_config.get('unit') == 'px' or 'width_px' in size_config:
                # Pixel boyutlarƒ±
                width = size_config.get('width_px', size_config.get('width', 300))
                height = size_config.get('height_px', size_config.get('height', 400))
                dimensions = CropDimensions(
                    width=int(width),
                    height=int(height),
                    unit='px',
                    dpi=dpi,
                    min_dpi=min_dpi
                )
            elif size_config.get('unit') == 'cm':
                # cm boyutlarƒ±
                width = size_config.get('width_cm', size_config.get('width', 3.5))
                height = size_config.get('height_cm', size_config.get('height', 4.5))
                dimensions = CropDimensions(
                    width=float(width),
                    height=float(height),
                    unit='cm',
                    dpi=dpi,
                    min_dpi=min_dpi
                )
            else:
                # mm boyutlarƒ± (varsayƒ±lan)
                width = size_config.get('width_mm', size_config.get('width', 35))
                height = size_config.get('height_mm', size_config.get('height', 45))
                dimensions = CropDimensions(
                    width=float(width),
                    height=float(height),
                    unit='mm',
                    dpi=dpi,
                    min_dpi=min_dpi
                )

            # √áƒ±ktƒ± dosya formatƒ±nƒ± ayarla
            # output_format = size_config.get('format', 'jpg') # √áƒ±ktƒ± formatƒ± se√ßimi kaldƒ±rƒ±ldƒ±
            output_format = 'jpg' # Sabit JPG
            if output_format == 'original':
                # Orijinal formatƒ± koru
                pass  # output_path zaten yukarƒ±da ayarlandƒ±
            elif output_format == 'png':
                output_path = output_path.with_suffix('.png')
            else:
                output_path = output_path.with_suffix('.jpg')

            success = False

            # A√ßƒ±k Lise/MEBBIS i√ßin √∂zel i≈üleme
            if size_config.get('force_biometric'):
                try:
                    # Boyut tipine g√∂re farklƒ± fonksiyon √ßaƒüƒ±r
                    selected_display = self.size_combo.get()
                    size_type = self.size_display_values.get(selected_display, "e_okul")

                    if size_type == 'mebbis':
                        success = self.photo_processor.crop_face_biometric_mebbis(
                            input_path, 
                            output_path, 
                            dimensions,
                            white_background=size_config.get('white_background', False)
                        )
                        if success:
                            self.log_message(f"   üéØ MEBBIS biyometrik kƒ±rpma kullanƒ±ldƒ±")
                    else:
                        success = self.photo_processor.crop_face_biometric_acik_lise(
                            input_path, 
                            output_path, 
                            dimensions,
                            white_background=size_config.get('white_background', False)
                        )
                        if success:
                            self.log_message(f"   üéØ A√ßƒ±k Lise biyometrik kƒ±rpma kullanƒ±ldƒ±")
                except Exception as bio_error:
                    self.log_message(f"   ‚ö†Ô∏è Biyometrik kƒ±rpma hatasƒ±: {bio_error}")
                    success = False
            else:
                # Diƒüer formatlar i√ßin normal y√ºz algƒ±lama
                try:
                    success = self.photo_processor.crop_face_auto(
                        input_path, 
                        output_path, 
                        dimensions,
                        padding_factor=0.15  # Daha az padding
                    )
                except Exception as face_error:
                    self.log_message(f"   ‚ö†Ô∏è Y√ºz algƒ±lama hatasƒ±: {face_error}")
                    success = False

            # Y√ºz algƒ±lanamadƒ±ƒüƒ±nda merkezi kƒ±rpma
            if not success:
                try:
                    success = self.photo_processor.crop_image(
                        input_path,
                        output_path,
                        dimensions
                    )
                    if success:
                        self.log_message(f"   üìê Merkezi kƒ±rpma kullanƒ±ldƒ±")
                except Exception as crop_error:
                    self.log_message(f"   ‚ùå Kƒ±rpma hatasƒ±: {crop_error}")
                    return False

            # Watermark ekle (eƒüer aktifse)
            if success and self.watermark_enabled.get():
                try:
                    self.apply_watermark_to_photo(output_path)
                except Exception as watermark_error:
                    self.log_message(f"   ‚ö†Ô∏è Watermark ekleme hatasƒ±: {watermark_error}")

            # E-Okul i√ßin dosya boyutu kontrol√º
            if success and size_config.get('file_size_limit'):
                try:
                    success = self.optimize_file_size(output_path, size_config)
                    if success:
                        final_size = output_path.stat().st_size / 1024
                        self.log_message(f"   üìè Dosya boyutu optimize edildi: {final_size:.1f} KB")
                except Exception as size_error:
                    self.log_message(f"   ‚ö†Ô∏è Dosya boyutu optimizasyonu hatasƒ±: {size_error}")

            return success

        except Exception as e:
            self.log_message(f"‚ùå Fotoƒüraf i≈üleme genel hatasƒ±: {e}")
            return False

    def optimize_file_size(self, file_path, size_config):
        """Dosya boyutunu optimize et (sadece E-Okul i√ßin)"""
        try:
            min_kb, max_kb = size_config['file_size_limit']
            min_bytes = min_kb * 1024
            max_bytes = max_kb * 1024

            from PIL import Image
            import os

            # Mevcut dosya boyutunu kontrol et
            current_size = os.path.getsize(file_path)

            if min_bytes <= current_size <= max_bytes:
                return True

            # Dosya formatƒ±nƒ± al
            # output_format = size_config.get('format', 'jpg') # √áƒ±ktƒ± formatƒ± se√ßimi kaldƒ±rƒ±ldƒ±
            output_format = 'jpg' # Sabit JPG

            # Dosya boyutu uygun deƒüilse kaliteyi ayarla
            quality = size_config['quality']
            original_quality = quality

            # Dosya √ßok b√ºy√ºkse kaliteyi d√º≈ü√ºr
            while current_size > max_bytes and quality > 20:
                quality -= 5

                with Image.open(file_path) as img:
                    # DPI bilgisini koru
                    dpi_info = img.info.get('dpi', (300, 300))

                    if output_format.lower() == 'png':
                        img.save(file_path, format='PNG', optimize=True, dpi=dpi_info)
                    else:
                        img.save(file_path, format='JPEG', quality=quality, optimize=True, dpi=dpi_info)

                current_size = os.path.getsize(file_path)

            # Dosya √ßok k√º√ß√ºkse kaliteyi artƒ±r (sadece JPEG i√ßin)
            if current_size < min_bytes and quality < original_quality and output_format.lower() == 'jpg':
                quality = min(95, quality + 20)
                with Image.open(file_path) as img:
                    # DPI bilgisini koru
                    dpi_info = img.info.get('dpi', (300, 300))
                    img.save(file_path, format='JPEG', quality=quality, optimize=True, dpi=dpi_info)

            final_size = os.path.getsize(file_path)
            final_kb = final_size / 1024

            # Hedef aralƒ±kta mƒ± kontrol et
            if min_kb <= final_kb <= max_kb:
                return True
            else:
                self.log_message(f"   ‚ö†Ô∏è Dosya boyutu hedef aralƒ±ƒüa getirilemedi: {final_kb:.1f} KB (Format: {output_format.upper()})")
                return True  # Yine de devam et

        except Exception as e:
            self.log_message(f"‚ùå Dosya boyutu optimizasyonu hatasƒ±: {e}")
            return False

    def apply_watermark_to_photo(self, photo_path: Path):
        """Fotoƒürafa sadece metin watermark ekle"""
        try:
            # Dosya var mƒ± kontrol et
            if not photo_path.exists():
                self.log_message(f"‚ùå Watermark eklenecek dosya bulunamadƒ±: {photo_path}")
                return

            watermark_text = self.watermark_text_var.get().strip()
            if not watermark_text:
                return

            # PNG dosyasƒ± i√ßin uyarƒ±
            if photo_path.suffix.lower() == '.png':
                self.log_message(f"‚ö†Ô∏è PNG dosyasƒ±na watermark ekleniyor: {photo_path.name}")

            from PIL import Image, ImageDraw, ImageFont

            with Image.open(photo_path) as img:
                # Format kontrol√º
                is_png = photo_path.suffix.lower() == '.png'

                if is_png and img.mode != 'RGBA':
                    img = img.convert('RGBA')
                elif not is_png and img.mode != 'RGB':
                    img = img.convert('RGB')

                if is_png:
                    overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))
                else:
                    overlay = Image.new('RGBA', img.size, (0, 0, 0, 0))

                draw = ImageDraw.Draw(overlay)

                font_size = max(20, min(img.width, img.height) // 30)
                try:
                    font = ImageFont.truetype("arial.ttf", font_size)
                except:
                    try:
                        font = ImageFont.truetype("C:/Windows/Fonts/arial.ttf", font_size)
                    except:
                        font = ImageFont.load_default()

                bbox = draw.textbbox((0, 0), watermark_text, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]

                margin = 20
                x = img.width - text_width - margin
                y = img.height - text_height - margin

                bg_padding = 10
                draw.rectangle(
                    [x - bg_padding, y - bg_padding, 
                     x + text_width + bg_padding, y + text_height + bg_padding],
                    fill=(0, 0, 0, 128)
                )

                draw.text((x, y), watermark_text, font=font, fill=(255, 255, 255, 200))

                if is_png:
                    watermarked = Image.alpha_composite(img, overlay)
                    watermarked.save(photo_path, format='PNG', optimize=True)
                else:
                    watermarked = Image.alpha_composite(img.convert('RGBA'), overlay)
                    watermarked = watermarked.convert('RGB')
                    watermarked.save(photo_path, format='JPEG', quality=95, optimize=True)

        except Exception as e:
            self.log_message(f"‚ùå Watermark ekleme hatasƒ±: {e}")

    def clean_filename(self, filename: str, preserve_spaces: bool = False) -> str:
        """Dosya adƒ±nƒ± temizle"""
        # Ge√ßersiz karakterleri kaldƒ±r
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')

        if not preserve_spaces:
            # Bo≈üluklarƒ± alt √ßizgi ile deƒüi≈ütir (sadece preserve_spaces False ise)
            filename = filename.replace(' ', '_')

            # √áoklu alt √ßizgileri tekle
            while '__' in filename:
                filename = filename.replace('__', '_')

            # Ba≈ütan ve sondan alt √ßizgi kaldƒ±r
            filename = filename.strip('_')
        else:
            # Bo≈üluklarƒ± koru ama √ßoklu bo≈üluklarƒ± tekle
            filename = ' '.join(filename.split())

        # Bo≈ü ise varsayƒ±lan ad ver
        if not filename:
            filename = 'unnamed'

        return filename

    def open_output_directory(self):
        """√áƒ±ktƒ± dizinini a√ß"""
        if not self.school_name:
            messagebox.showwarning("Uyarƒ±", "√ñnce okul adƒ±nƒ± girin.")
            return

        if not self.photo_directory:
            messagebox.showwarning("Uyarƒ±", "√ñnce fotoƒüraf dizini se√ßin.")
            return

        # VesiKolayPro ana dizinindeki okul klas√∂r√ºn√º a√ß
        from utils import VesiKolayUtils
        school_output_dir = VesiKolayUtils.get_school_directory(self.school_name)

        if school_output_dir.exists():
            # ƒ∞≈ületim sistemine g√∂re dizin a√ßma
            import subprocess
            import sys
            try:
                if sys.platform == "win32":
                    subprocess.run(["explorer", str(school_output_dir)])
                elif sys.platform == "darwin":
                    subprocess.run(["open", str(school_output_dir)])
                else:
                    subprocess.run(["xdg-open", str(school_output_dir)])
                self.log_message(f"üìÅ Okul √ßƒ±ktƒ± dizini a√ßƒ±ldƒ±: {school_output_dir.name}")
            except Exception as e:
                self.log_message(f"üìÅ Okul √ßƒ±ktƒ± dizini yolu: {school_output_dir}")
                self.log_message(f"‚ùå Dizin a√ßma hatasƒ±: {e}")
        else:
            self.log_message("‚ùå Hen√ºz bu okul i√ßin √ßƒ±ktƒ± dizini olu≈üturulmamƒ±≈ü.")

    def open_pdf_directory(self):
        """PDF dizinini a√ß"""
        if not self.school_name:
            messagebox.showwarning("Uyarƒ±", "√ñnce okul adƒ±nƒ± girin.")
            return

        # VesiKolayPro ana dizinindeki okul klas√∂r√ºn√º bul
        from utils import VesiKolayUtils
        school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

        if not school_main_dir.exists():
            self.log_message("‚ùå Hen√ºz bu okul i√ßin √ßƒ±ktƒ± dizini olu≈üturulmamƒ±≈ü.")
            return

        # En son olu≈üturulan tarih-saat klas√∂r√ºn√º bul
        timestamp_dirs = [d for d in school_main_dir.iterdir() 
                         if d.is_dir() and d.name.replace('_', '').replace('-', '').isdigit()]

        if not timestamp_dirs:
            self.log_message("‚ùå Hen√ºz PDF dosyasƒ± olu≈üturulmamƒ±≈ü.")
            return

        # En son olu≈üturulan dizindeki PDF klas√∂r√ºn√º a√ß
        latest_dir = max(timestamp_dirs, key=lambda x: x.stat().st_mtime)
        pdf_dir = latest_dir / "pdfs"

        if pdf_dir.exists():
            import subprocess
            import sys
            try:
                if sys.platform == "win32":
                    subprocess.run(["explorer", str(pdf_dir)])
                elif sys.platform == "darwin":
                    subprocess.run(["open", str(pdf_dir)])
                else:
                    subprocess.run(["xdg-open", str(pdf_dir)])
                self.log_message(f"üìÑ PDF dizini a√ßƒ±ldƒ±: {pdf_dir.name}")
            except Exception as e:
                self.log_message(f"üìÑ PDF dizini yolu: {pdf_dir}")
                self.log_message(f"‚ùå Dizin a√ßma hatasƒ±: {e}")
        else:
            self.log_message("‚ùå Hen√ºz PDF dosyasƒ± olu≈üturulmamƒ±≈ü.")

    def open_id_cards_directory(self):
        """Kimlik kartlarƒ± dizinini a√ß"""
        if not self.school_name:
            messagebox.showwarning("Uyarƒ±", "√ñnce okul adƒ±nƒ± girin.")
            return

        # VesiKolayPro ana dizinindeki okul klas√∂r√ºn√º bul
        from utils import VesiKolayUtils
        school_main_dir = VesiKolayUtils.get_school_directory(self.school_name)

        if not school_main_dir.exists():
            self.log_message("‚ùå Hen√ºz bu okul i√ßin √ßƒ±ktƒ± dizini olu≈üturulmamƒ±≈ü.")
            return

        # En son olu≈üturulan tarih-saat klas√∂r√ºn√º bul
        timestamp_dirs = [d for d in school_main_dir.iterdir() 
                         if d.is_dir() and d.name.replace('_', '').replace('-', '').isdigit()]

        if not timestamp_dirs:
            self.log_message("‚ùå Hen√ºz kimlik kartƒ± olu≈üturulmamƒ±≈ü.")
            return

        # En son olu≈üturulan dizindeki kimlik kartlarƒ± klas√∂r√ºn√º a√ß
        latest_dir = max(timestamp_dirs, key=lambda x: x.stat().st_mtime)
        id_cards_dir = latest_dir / "id_cards"

        if id_cards_dir.exists():
            import subprocess
            import sys
            try:
                if sys.platform == "win32":
                    subprocess.run(["explorer", str(id_cards_dir)])
                elif sys.platform == "darwin":
                    subprocess.run(["open", str(id_cards_dir)])
                else:
                    subprocess.run(["xdg-open", str(id_cards_dir)])
                self.log_message(f"üÜî Kimlik kartlarƒ± dizini a√ßƒ±ldƒ±: {id_cards_dir.name}")
            except Exception as e:
                self.log_message(f"üÜî Kimlik kartlarƒ± dizini yolu: {id_cards_dir}")
                self.log_message(f"‚ùå Dizin a√ßma hatasƒ±: {e}")
        else:
            self.log_message("‚ùå Hen√ºz kimlik kartƒ± olu≈üturulmamƒ±≈ü.")

    def create_footer(self):
        """Footer b√∂l√ºm√ºn√º olu≈ütur"""
        footer_frame = tk.Frame(self.main_container, bg=ModernUI.COLORS['dark'], height=35)
        footer_frame.pack(fill=tk.X, side=tk.BOTTOM)
        footer_frame.pack_propagate(False)

        program_info = "VesiKolay Pro v1.0"
        link_text = "https://github.com/muallimun/VesiKolayPro"

        # Program bilgisi container
        program_info_container = tk.Frame(footer_frame, bg=ModernUI.COLORS['dark'])
        program_info_container.pack(side=tk.LEFT, padx=8, pady=8)
        
        # Program ismi ve versiyon
        info_label = tk.Label(program_info_container, text=program_info, 
                             fg=ModernUI.COLORS['light'], 
                             bg=ModernUI.COLORS['dark'],
                             font=('Segoe UI', 8),
                             cursor="hand2")
        info_label.pack(side=tk.LEFT)
        info_label.bind("<Button-1>", lambda e: self.open_link("https://www.muallimun.com/VesiKolayPro/"))
        ToolTip(info_label, "Muallimun.Net'e ula≈ümak i√ßin TIKLAYINIZ.")
        
        # G√ºncelleme ikonu
        update_icon_label = tk.Label(program_info_container, 
                                   text="üîÑ", 
                                   fg='lightgreen', 
                                   bg=ModernUI.COLORS['dark'],
                                   font=('Segoe UI', 10),
                                   cursor="hand2")
        update_icon_label.pack(side=tk.LEFT, padx=(5, 0))
        update_icon_label.bind("<Button-1>", lambda e: self.check_for_updates_manual())
        ToolTip(update_icon_label, "G√ºncellemeleri kontrol et - VesiKolay Pro'nun yeni versiyonu var mƒ±?")

        # Merkez container - logo ve link i√ßin
        center_frame = tk.Frame(footer_frame, bg=ModernUI.COLORS['dark'])
        center_frame.pack(expand=True)

        # Muallimun logo ve link container
        muallimun_container = tk.Frame(center_frame, bg=ModernUI.COLORS['dark'])
        muallimun_container.pack(pady=3)

        # Muallimun logosu
        try:
            from PIL import Image, ImageTk
            muallimun_logo_path = Path(__file__).parent / "images" / "muallimun.png"
            if muallimun_logo_path.exists():
                muallimun_image = Image.open(muallimun_logo_path)
                # Logo boyutunu footer'a uygun ≈üekilde ayarla (y√ºkseklik: 25px)
                logo_height = 25
                img_width, img_height = muallimun_image.size
                logo_width = int((img_width * logo_height) / img_height)
                muallimun_resized = muallimun_image.resize((logo_width, logo_height), Image.Resampling.LANCZOS)
                self.muallimun_logo = ImageTk.PhotoImage(muallimun_resized)
                
                muallimun_logo_label = tk.Label(muallimun_container,
                                              image=self.muallimun_logo,
                                              bg=ModernUI.COLORS['dark'],
                                              cursor="hand2")
                muallimun_logo_label.pack(side=tk.LEFT, padx=(0, 5))
                muallimun_logo_label.bind("<Button-1>", lambda e: self.open_link("https://www.muallimun.com/"))
                ToolTip(muallimun_logo_label, "Muallimun.Net'e ula≈ümak i√ßin TIKLAYINIZ.")
            else:
                print("‚ö†Ô∏è Muallimun logosu bulunamadƒ±")
        except Exception as e:
            print(f"‚ö†Ô∏è Muallimun logosu y√ºklenirken hata: {e}")

        

        # Saƒü taraf container
        right_frame = tk.Frame(footer_frame, bg=ModernUI.COLORS['dark'])
        right_frame.pack(side=tk.RIGHT, padx=8, pady=8)

        # G√ºncelleme kontrol butonu
        update_button = tk.Label(right_frame, text="üîÑ G√ºncelleme Kontrol Et", 
                                fg='lightblue', 
                                bg=ModernUI.COLORS['dark'], 
                                cursor="hand2",
                                font=('Segoe UI', 8))
        update_button.pack(side=tk.RIGHT, padx=(0, 8))
        update_button.bind("<Button-1>", lambda e: self.check_for_updates_manual())
        ToolTip(update_button, "Manuel g√ºncelleme kontrol√º yapar. Yeni s√ºr√ºm varsa GitHub'dan indirme linkini a√ßar.")

        link_label = tk.Label(right_frame, text=link_text, 
                             fg='white', 
                             bg=ModernUI.COLORS['dark'], 
                             cursor="hand2",
                             font=('Segoe UI', 8))
        link_label.pack(side=tk.RIGHT)
        link_label.bind("<Button-1>", lambda e: self.open_link(link_text))
        ToolTip(link_label, "VesiKolay Pro'nun GitHub sayfasƒ±nƒ± a√ßar. Kaynak kod ve g√ºncellemeler i√ßin tƒ±klayƒ±n.")

    def open_link(self, url):
        """Belirtilen URL'yi a√ß"""
        webbrowser.open_new(url)

    def check_for_updates_manual(self):
        """Manuel g√ºncelleme kontrol√º"""
        try:
            if self.update_checker:
                self.update_checker.perform_manual_check(self.root)
            else:
                # Update checker yoksa direkt GitHub'ƒ± a√ß
                result = messagebox.askyesno("G√ºncelleme Kontrol√º", 
                                           "‚ö†Ô∏è G√ºncelleme kontrol√º otomatik yapƒ±lamƒ±yor.\n\n"
                                           "GitHub sayfasƒ±nƒ± a√ßarak manuel kontrol yapmak ister misiniz?")
                if result:
                    webbrowser.open("https://github.com/muallimun/VesiKolayPro/releases")
        except Exception as e:
            self.log_message(f"‚ùå G√ºncelleme kontrol√º hatasƒ±: {e}")
            # Hata durumunda GitHub sayfasƒ±nƒ± a√ß
            result = messagebox.askyesno("Hata", 
                                       f"G√ºncelleme kontrol√º sƒ±rasƒ±nda hata olu≈ütu:\n{e}\n\n"
                                       "GitHub sayfasƒ±nƒ± a√ßmak ister misiniz?")
            if result:
                webbrowser.open("https://github.com/muallimun/VesiKolayPro")

    def check_for_updates_startup(self):
        """Program a√ßƒ±lƒ±≈üƒ±nda g√ºncelleme kontrol√º"""
        try:
            if self.update_checker:
                # 2 saniye bekle (GUI tamamen y√ºklendikten sonra)
                self.root.after(2000, lambda: self.update_checker.perform_startup_check(self.root))
        except Exception as e:
            # Sessizce ge√ß, startup'ta hata vermemeli
            pass

    def handle_check_button_click(self):
        """Kontrol butonuna tƒ±klandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        # Kontrol butonu her zaman aktif olabilir, sadece temel kontrolleri yapar
        if not self.school_name:
            messagebox.showwarning("Eksik Bilgi", "‚ö†Ô∏è √ñnce okul adƒ±nƒ± girin.\n\nüìù Adƒ±m 1'de okul adƒ±nƒ± belirtmeniz gerekir.")
            return
            
        if not self.excel_data:
            messagebox.showwarning("Eksik Bilgi", "‚ö†Ô∏è √ñnce Excel dosyasƒ± se√ßin ve y√ºkleyin.\n\nüìä Adƒ±m 2'de Excel dosyasƒ±nƒ± se√ßmeniz gerekir.")
            return
            
        if not self.photo_directory:
            messagebox.showwarning("Eksik Bilgi", "‚ö†Ô∏è √ñnce fotoƒüraf dizini se√ßin.\n\nüìÇ Adƒ±m 3'te fotoƒüraf klas√∂r√ºn√º se√ßmeniz gerekir.")
            return
            
        selected_columns = self.get_selected_columns()
        if not selected_columns:
            messagebox.showwarning("Eksik Bilgi", "‚ö†Ô∏è Adlandƒ±rma i√ßin en az bir s√ºtun se√ßin.\n\nüîß Adƒ±m 4'te s√ºtun se√ßimi yapmanƒ±z gerekir.")
            return
            
        # T√ºm ko≈üullar saƒülanmƒ±≈üsa kontrol√º √ßalƒ±≈ütƒ±r
        self.check_counts()

    def handle_rename_button_click(self):
        """Adlandƒ±rma butonuna tƒ±klandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        if self.rename_button['state'] == 'disabled':
            missing_items = self.get_missing_requirements_for_rename()
            if missing_items:
                messagebox.showinfo("Gereksinimler", f"‚ú® Fotoƒüraf Adlandƒ±rma ƒ∞√ßin Gereksinimler:\n\n{missing_items}\n\nüí° Bu gereksinimleri tamamladƒ±ktan sonra 'üîç Kontrol Et' butonuna tƒ±klayƒ±n.")
            return
        
        # Buton aktifse i≈ülemi ba≈ülat
        self.start_rename_photos()

    def handle_crop_resize_button_click(self):
        """Boyutlandƒ±rma butonuna tƒ±klandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        if self.crop_resize_button['state'] == 'disabled':
            missing_items = self.get_missing_requirements_for_crop_resize()
            if missing_items:
                messagebox.showinfo("Gereksinimler", f"‚úÇÔ∏è Fotoƒüraf Boyutlandƒ±rma ƒ∞√ßin Gereksinimler:\n\n{missing_items}")
            return
        
        # Buton aktifse i≈ülemi ba≈ülat
        self.start_crop_and_resize_photos()

    def handle_pdf_button_click(self):
        """PDF butonuna tƒ±klandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        if self.pdf_button['state'] == 'disabled':
            missing_items = self.get_missing_requirements_for_pdf()
            if missing_items:
                messagebox.showinfo("Gereksinimler", f"üìÑ PDF Olu≈üturma ƒ∞√ßin Gereksinimler:\n\n{missing_items}")
            return
        
        # Buton aktifse i≈ülemi ba≈ülat
        self.start_generate_class_pdfs()

    def handle_id_card_button_click(self):
        """Kimlik kartƒ± butonuna tƒ±klandƒ±ƒüƒ±nda √ßalƒ±≈üƒ±r"""
        if self.id_card_button['state'] == 'disabled':
            missing_items = self.get_missing_requirements_for_id_cards()
            if missing_items:
                messagebox.showinfo("Gereksinimler", f"üÜî Kimlik Kartƒ± Olu≈üturma ƒ∞√ßin Gereksinimler:\n\n{missing_items}")
            return
        
        # Buton aktifse i≈ülemi ba≈ülat
        self.start_generate_id_cards()

    def get_missing_requirements_for_rename(self):
        """Adlandƒ±rma i√ßin eksik gereksinimleri d√∂nd√ºr√ºr"""
        missing = []
        
        if not self.school_name:
            missing.append("üìù Okul adƒ± (Adƒ±m 1)")
        
        if not self.excel_data:
            missing.append("üìä Excel dosyasƒ± (Adƒ±m 2)")
        
        if not self.photo_directory:
            missing.append("üìÇ Fotoƒüraf klas√∂r√º (Adƒ±m 3)")
        
        selected_columns = self.get_selected_columns()
        if not selected_columns:
            missing.append("üîß S√ºtun se√ßimi (Adƒ±m 4)")
        
        if missing:
            missing.append("\nüí° T√ºm gereksinimleri tamamladƒ±ktan sonra 'üîç Kontrol Et' butonuna tƒ±klayƒ±n.")
        
        return "\n".join(missing) if missing else ""

    def get_missing_requirements_for_crop_resize(self):
        """Boyutlandƒ±rma i√ßin eksik gereksinimleri d√∂nd√ºr√ºr"""
        missing = []
        
        if not self.sizing_enabled.get():
            missing.append("üîß Boyutlandƒ±rma se√ßeneƒüini aktifle≈ütirin (Adƒ±m 5)")
        
        if not self.school_name:
            missing.append("üìù Okul adƒ± (Adƒ±m 1)")
        
        if not self.photo_directory:
            missing.append("üìÇ Fotoƒüraf klas√∂r√º (Adƒ±m 3)")
        
        # Adlandƒ±rma ile birlikte boyutlandƒ±rma yapƒ±lacaksa
        if self.sizing_with_naming.get():
            if not self.excel_data:
                missing.append("üìä Excel dosyasƒ± (Adƒ±m 2 - Adlandƒ±rma i√ßin)")
            
            selected_columns = self.get_selected_columns()
            if not selected_columns:
                missing.append("üîß S√ºtun se√ßimi (Adƒ±m 4 - Adlandƒ±rma i√ßin)")
        
        return "\n".join(missing) if missing else ""

    def get_missing_requirements_for_pdf(self):
        """PDF olu≈üturma i√ßin eksik gereksinimleri d√∂nd√ºr√ºr"""
        missing = []
        
        if not self.school_name:
            missing.append("üìù Okul adƒ± (Adƒ±m 1)")
        
        if not self.excel_data:
            missing.append("üìä Excel dosyasƒ± (Adƒ±m 2)")
        
        if not self.photo_directory:
            missing.append("üìÇ Fotoƒüraf klas√∂r√º (Adƒ±m 3)")
        
        selected_columns = self.get_selected_columns()
        if not selected_columns:
            missing.append("üîß S√ºtun se√ßimi (Adƒ±m 4)")
        
        missing.append("\nüí° PDF olu≈üturmadan √∂nce fotoƒüraflarƒ± adlandƒ±rmanƒ±z gerekir.")
        missing.append("   'üîç Kontrol Et' ardƒ±ndan '‚ú® Fotoƒüraflarƒ± Adlandƒ±r' i≈ülemini yapƒ±n.")
        
        return "\n".join(missing) if missing else ""

    def get_missing_requirements_for_id_cards(self):
        """Kimlik kartƒ± olu≈üturma i√ßin eksik gereksinimleri d√∂nd√ºr√ºr"""
        missing = []
        
        if not self.school_name:
            missing.append("üìù Okul adƒ± (Adƒ±m 1)")
        
        if not self.excel_data:
            missing.append("üìä Excel dosyasƒ± (Adƒ±m 2)")
        
        if not self.photo_directory:
            missing.append("üìÇ Fotoƒüraf klas√∂r√º (Adƒ±m 3)")
        
        missing.append("\nüí° Kimlik kartƒ± olu≈üturmadan √∂nce fotoƒüraflarƒ± adlandƒ±rmanƒ±z gerekir.")
        missing.append("   'üîç Kontrol Et' ardƒ±ndan '‚ú® Fotoƒüraflarƒ± Adlandƒ±r' i≈ülemini yapƒ±n.")
        
        return "\n".join(missing) if missing else ""

    def run_console_mode(self):
        """Konsol modunda √ßalƒ±≈ütƒ±r"""
        print("=" * 50)
        print("VesiKolay Pro - Konsol Modu")
        print("=" * 50)
        print("Bu sistem grafik aray√ºz√º desteklemiyor.")
        print("L√ºtfen a≈üaƒüƒ±daki i≈ülemlerden birini se√ßin:")
        print("1. Test verileriyle demo √ßalƒ±≈ütƒ±r")
        print("2. Sistem bilgilerini g√∂r√ºnt√ºle")
        print("3. √áƒ±kƒ±≈ü")

        while True:
            try:
                secim = input("\nSe√ßiminizi yapƒ±n (1-3): ").strip()
                if secim == "1":
                    self.demo_run()
                elif secim == "2":
                    self.system_info()
                elif secim == "3":
                    print("Program sonlandƒ±rƒ±lƒ±yor...")
                    break
                else:
                    print("Ge√ßersiz se√ßim. L√ºtfen 1-3 arasƒ± bir sayƒ± girin.")
            except KeyboardInterrupt:
                print("\nProgram sonlandƒ±rƒ±lƒ±yor...")
                break
            except Exception as e:
                print(f"Hata: {e}")

    def demo_run(self):
        """Demo √ßalƒ±≈ütƒ±r"""
        print("\n" + "=" * 30)
        print("DEMO √áALI≈ûTIRILIYOR")
        print("=" * 30)

        # Test Excel dosyasƒ±nƒ± kontrol et
        from pathlib import Path
        test_excel = Path("data/test_students.xlsx")
        test_photos = Path("data/test_photos")

        if test_excel.exists():
            print(f"‚úÖ Test Excel dosyasƒ± bulundu: {test_excel}")
        else:
            print(f"‚ùå Test Excel dosyasƒ± bulunamadƒ±: {test_excel}")

        if test_photos.exists():
            photos = list(test_photos.glob("*.jpg"))
            print(f"‚úÖ Test fotoƒüraf klas√∂r√º bulundu: {len(photos)} fotoƒüraf")
        else:
            print(f"‚ùå Test fotoƒüraf klas√∂r√º bulunamadƒ±: {test_photos}")

        print("\nDemo tamamlandƒ±.")

    def system_info(self):
        """Sistem bilgilerini g√∂ster"""
        import platform
        import sys

        print("\n" + "=" * 30)
        print("Sƒ∞STEM Bƒ∞LGƒ∞LERƒ∞")
        print("=" * 30)
        print(f"Python S√ºr√ºm√º: {sys.version}")
        print(f"Platform: {platform.platform()}")
        print(f"ƒ∞≈ülemci: {platform.processor()}")
        print(f"Sistem: {platform.system()}")

        # Mod√ºl kontrol√º
        modules = ['tkinter', 'pandas', 'PIL', 'cv2', 'fpdf']
        print(f"\nMod√ºl Durumu:")
        for module in modules:
            try:
                if module == 'cv2':
                    import cv2
                    print(f"‚úÖ OpenCV: {cv2.__version__}")
                elif module == 'PIL':
                    import PIL
                    print(f"‚úÖ Pillow: {PIL.__version__}")
                elif module == 'tkinter':
                    import tkinter
                    print(f"‚úÖ Tkinter: Mevcut")
                elif module == 'pandas':
                    import pandas
                    print(f"‚úÖ Pandas: {pandas.__version__}")
                elif module == 'fpdf':
                    import fpdf
                    print(f"‚úÖ FPDF: Mevcut")
            except ImportError:
                print(f"‚ùå {module}: Y√ºklenemedi")

    def run(self):
        """Uygulamayƒ± √ßalƒ±≈ütƒ±r"""
        try:
            if hasattr(self, 'root') and self.root:
                self.root.mainloop()
            else:
                self.run_console_mode()
        except Exception as e:
            print(f"Uygulama √ßalƒ±≈ütƒ±rma hatasƒ±: {e}")
            self.run_console_mode()